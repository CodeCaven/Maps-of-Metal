<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <title>reddit Vis</title>

    <!--<link rel="shortcut icon" type="image/jpg" href="/images/favicon.jpg"/> -->
    
    <script src="https://d3js.org/d3.v6.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Turf.js/5.1.5/turf.min.js"></script><!--turf for d3 winding order-->
    <!--<script src="https://d3js.org/d3.v4.min.js"></script> D3 v4 for events-->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link rel="stylesheet" href="https://unpkg.com/tippy.js@6/themes/translucent.css"/>
    <link rel="stylesheet" href="https://unpkg.com/tippy.js@6/animations/scale.css"/>

    <script src="./javascripts/global.js"></script>
    <script type="text/javascript">

        // get data from controller
        let thrash_bands = JSON.parse(<%-JSON.stringify(ejs_thrash_bands)%>);
        let thrash_lookup = JSON.parse(<%-JSON.stringify(ejs_thrash_lookup)%>);
        let world_map_json = JSON.parse(<%-JSON.stringify(ejs_world_map)%>);

        // global units
        let vhu;
        let vwu;

        // DOM loaded callback
		document.addEventListener('DOMContentLoaded', function() {

            // d3 and geojson
            // https://www.d3indepth.com/geographic/

            // HERE
            // better detailed map (leaflet>)
            // geojson for US states
            // country names, cities ??
            // add bands
            // slider and logic for years
            
           // log data
           console.log(thrash_bands);
           console.log(thrash_lookup);
           console.log(world_map_json);

           // global units
           vhu = parseFloat(window.innerHeight/100);
           vwu = parseFloat(window.innerWidth/100);
           console.log("height and width window units");
           console.log(vhu);
           console.log(vwu);

           // set chart height (bootstrap determines width)
           document.getElementById("plot_div").style.height = "90vh";

           draw_map();
           
         }, false);

         function draw_map(){
            // get width and height of plot area
            var plot_area = document.getElementById("plot_div");
            var plot_height = plot_area.offsetHeight;
            var plot_width = plot_area.offsetWidth;

            // set the dimensions and margins of the plot 
            var margin = {top: 0, 
                        right: 0, 
                        bottom: 0, 
                        left: 0};

            // chart width and height (leaving names from old code)
            var width = plot_width - margin.left - margin.right;
            var height = plot_height - margin.top - margin.bottom;

            // remove any elements in plot area
            while (plot_area.firstChild) {
                plot_area.removeChild(plot_area.firstChild);
            }

            // zoom
            function zoomed(event) {
                const {transform} = event;
                svg.attr("transform", transform);
                //svg.attr("stroke-width", 1 / transform.k);
            }

            let zoom = d3.zoom()
                .scaleExtent([0.5, 20])
                .on('zoom', zoomed);

            // append the svg object to the plot area
            var svg = d3.select("#plot_div")
            .append("svg")
                .attr("id" , "svgArea")
                .attr("width", plot_width)
                .attr("height", plot_height)
                .attr("viewBox", [0, 0, plot_width, plot_height]) // add zoom here to avoid pan jitter
                .attr("style", "width: 100%; height: auto; height: intrinsic;")
                .style("background-color", "white")
                .call(zoom)
            .append("g")
                .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");

            // create look up map
            //survey_map = new Map(Array.from(survey, d => [d.PHN_code, d]));

            // extent of values
            //var all_values = d3.map(survey, d => d.per_cent);
            //all_values = removeItemAll(all_values, 0); // remove 0s
            
            // color scale https://observablehq.com/@d3/color-schemes
            //domain = d3.extent(all_values);
            //color = d3.scaleSequential(domain,COLOUR_SCHEME);

            /*** unwind geojson using turf for d3  ***/ 
            var world_features = world_map_json.features;
            var fixed_world = world_features.map(function(f) {
                    return turf.rewind(f,{reverse:true});
            })


            // Map and projection ...Mercator
            const projection = d3.geoEquirectangular(); 
            projection.fitSize([width,height],{"type": "FeatureCollection","features":fixed_world})
            const path = d3.geoPath().projection(projection);

            // world map
           svg
            .append("g")
            .selectAll("path")
            .data(fixed_world)
            .join("path")
            .attr("d", path)
            .attr("fill", "white")
            .attr("stroke", "black")
            .attr("stroke-width", 0.5)
            .attr("class", "maparea");
            
           // add bands here ??
           /*
           svg
            .selectAll("circle")
            .data(cities)
            .enter()
            .append("circle")
            .attr("cx", d => projection(d.location)[0])
            .attr("cy", d => projection(d.location)[1])
            .attr("r", 5)
            .attr("filter", "url(#specular)")
            .attr("stroke", "white")
            .attr("fill", "var(--mdb-dark)")
            .attr("stroke-width", 2)
            .attr("stroke-opacity", 0.5);
            */
        }

    </script>
</head>