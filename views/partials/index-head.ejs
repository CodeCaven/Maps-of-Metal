<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <title>reddit Vis</title>

    <!--<link rel="shortcut icon" type="image/jpg" href="/images/favicon.jpg"/> -->
    
    <script src="https://d3js.org/d3.v6.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Turf.js/5.1.5/turf.min.js"></script><!--turf for d3 winding order-->
    <!--<script src="https://d3js.org/d3.v4.min.js"></script> D3 v4 for events-->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link rel="stylesheet" href="https://unpkg.com/tippy.js@6/themes/translucent.css"/>
    <link rel="stylesheet" href="https://unpkg.com/tippy.js@6/animations/scale.css"/>
    <script src="./javascripts/forceGraph.js"></script>
    <script src="./javascripts/global.js"></script>
    <script type="text/javascript">

        // get data from controller
        let thrash_bands = JSON.parse(<%-JSON.stringify(ejs_thrash_bands)%>);
        let thrash_lookup = JSON.parse(<%-JSON.stringify(ejs_thrash_lookup)%>);
        let world_places = JSON.parse(<%-JSON.stringify(ejs_places)%>);
        let world_states = JSON.parse(<%-JSON.stringify(ejs_states)%>);
        let us_counties = JSON.parse(<%-JSON.stringify(ejs_counties)%>);

        // global units
        let vhu;
        let vwu;

        // global vars
        let svg;
        let region = "Greece";
        let display_region = "World";
        let pop_max = 1000000;
        let THEME = "light";
        let current_year = 1987;
        

        // DOM loaded callback
		document.addEventListener('DOMContentLoaded', function() {

            // d3 and geojson
            // https://www.d3indepth.com/geographic/
            // https://github.com/martynafford/natural-earth-geojson/blob/master/10m/cultural/ne_10m_populated_places.json

           // log data
           //console.log(thrash_bands);
           //console.log(thrash_lookup);
           //console.log(world_map_json);
           console.log(world_places);
           console.log(world_states);
           console.log(us_counties);
           //console.log(world_roads);
           //console.log(urban_areas);
           //console.log(world_waters);

           // global units
           vhu = parseFloat(window.innerHeight/100);
           vwu = parseFloat(window.innerWidth/100);
           console.log("height and width window units");
           console.log(vhu);
           console.log(vwu);
           console.log(fips[region]);

           // set chart height (bootstrap determines width)
           document.getElementById("plot_div").style.height = "90vh";

           // event listeners
           document.getElementById('yearControl').addEventListener("click", handleYear);

           // set year and area display
           document.getElementById("yearDisplay").innerHTML = current_year;

           // set background by theme
           if(THEME == "dark"){
           document.body.style.backgroundColor = "var(--bs-gray-dark)";
           }else{
            document.body.style.backgroundColor = "white";
           }

           draw_map();
           
         }, false);

         /* EVENT HANDLERS*/
         function handleYear(event){
            var direction = event.target.id;
            var year_display = document.getElementById("yearDisplay");

            if(direction=='left'){
                if(current_year == 1973){
                    return;
                }
                else{
                    prev_year = current_year;
                    current_year -= 1;
                    year_display.innerHTML = current_year;
                    return;
                }
            }

            if(direction=='right'){
                if(current_year == 2023){
                    return;
                }
                else{
                    prev_year = current_year;
                    current_year += 1;
                    year_display.innerHTML = current_year;
                    return;
                }
            }
         }

         function init_bands(){
            console.log("hey");
         }

         function draw_map(){
            // get width and height of plot area
            var plot_area = document.getElementById("plot_div");
            var plot_height = plot_area.offsetHeight;
            var plot_width = plot_area.offsetWidth;

            // set the dimensions and margins of the plot 
            var margin = {top: 0, 
                        right: 0, 
                        bottom: 0, 
                        left: 0};

            // chart width and height (leaving names from old code)
            var width = plot_width - margin.left - margin.right;
            var height = plot_height - margin.top - margin.bottom;

            // remove any elements in plot area
            while (plot_area.firstChild) {
                plot_area.removeChild(plot_area.firstChild);
            }

            // zoom
            function zoomed(event) {
                const {transform} = event;
                svg.attr("transform", transform);
                //svg.attr("stroke-width", 1 / transform.k);
            }

            let zoom = d3.zoom()
                .scaleExtent([0.5, 20])
                .on('zoom', zoomed);

            // append the svg object to the plot area
            svg = d3.select("#plot_div")
            .append("svg")
                .attr("id" , "svgArea")
                .attr("width", plot_width)
                .attr("height", plot_height)
                .attr("viewBox", [0, 0, plot_width, plot_height]) // add zoom here to avoid pan jitter
                .attr("style", "width: 100%; height: auto; height: intrinsic;")
                .style("background-color", "white")
                //.call(zoom)
            .append("g")
                .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");

            // background
            svg.
            append("rect")
            .attr("id", "backLine")
            .attr("width", width)
            .attr("height",height)
            .attr("fill", function(){
                if(THEME == "dark"){return "var(--bs-gray-dark)"}
                return "white";
            })
            .attr("x",margin.left)
            .attr("y",margin.top);

            svg = create_light_filter(svg);
            svg = create_gradient_filter(svg);

            /*** Filter Map  ***/ 

            // us counties and places
            if(display_region == "US"){
                var display_states = us_counties.features.filter(prop => prop.properties.STATE == fips[region]);
                var places_points = world_places.features.filter(prop => prop.properties.ADM1NAME == region && prop.properties.POP_MAX > pop_max);
            }
            else{ // world states and places
                var display_states = world_states.features.filter(prop => prop.properties.admin == region);
                var places_points = world_places.features.filter(prop => prop.properties.ADM0NAME == region && prop.properties.POP_MAX > pop_max);
            }

            // turf unwind features for plot
            var fixed_states = display_states.map(function(f) {
                    return turf.rewind(f,{reverse:true});
            });

            // Map and projection ...Mercator
            const projection = d3.geoMercator(); 
            projection.fitSize([width,height],{"type": "FeatureCollection","features":fixed_states})
            const path = d3.geoPath().projection(projection);

            // scales
            var radScale = d3.scaleSqrt()
            .domain([pop_max, 10*pop_max])
            .range([1*vhu, 3*vhu]).clamp(true);

            var textScale = d3.scaleLinear()
            .domain([pop_max, 10*pop_max])
            .range([1, 3]).clamp(true);

            // counties or states
            svg
            .append("g")
            .selectAll("path")
            .data(fixed_states)
            .join("path")
            .attr("d", path)
            //.attr("fill", "khaki")
            .attr("fill","url(#middleCircleFill)")
            .attr("stroke", function(){
                if(THEME == "dark"){return "var(--bs-gray-dark)"}
                return "khaki";
            })
            .attr("stroke-width", 2)
            .attr("class", "statearea");
            
           // places
           svg
            .selectAll("circle")
            .data(places_points)
            .enter()
            .append("circle")
            .attr("cx", d => projection(d.geometry.coordinates)[0])
            .attr("cy", d => projection(d.geometry.coordinates)[1])
            .attr("r", function(d){
                return radScale(d.properties.POP_MAX);
            })
            .attr("filter", "url(#specular)")
            .attr("stroke", "white")
            .attr("fill", "var(--bs-gray-dark)")
            .attr("stroke-width", 2)
            .attr("fill-opacity", 0.8)
            .attr("stroke-opacity", 0.5);

            /*** place names **/

            // add first for bounding box
            svg
            .selectAll("text")
            .data(places_points)
            .enter()
            .append("text")
            .attr('dy', d => -2*radScale(d.properties.POP_MAX))
            .style('font-size', d => textScale(d.properties.POP_MAX)+"rem")
            .attr("letter-spacing", "2px")
            .attr("text-anchor", "start")
            .text(d => d.properties.NAME)
            .call(getBB);

            // remove the text elements (watch for other text elements)
            d3.selectAll("text").remove();

            // add background rects
            const xMargin = 4
            const yMargin = 2
            svg
            .selectAll("textareas")
            .data(places_points)
            .enter()
            .append("rect")
            .attr("class", "maprect")
            .attr("x", d => projection(d.geometry.coordinates)[0])
            .attr("y", d => projection(d.geometry.coordinates)[1] - 2*radScale(d.properties.POP_MAX))
            .attr("width", d => d.bbox.width + 2 * xMargin)
            .attr("height", d => d.bbox.height + 2 * yMargin)
            .style("fill", function(){
                if(THEME == "dark"){return "white"}
                return "var(--bs-gray-dark)";
            })
            .style("fill-opacity", 0.5)
            .attr('transform', function(d) {
                return `translate(-${xMargin}, -${d.bbox.height * 0.8 + yMargin})`
                });
            
           // add the text back
           svg
            .selectAll("text")
            .data(places_points)
            .enter()
            .append("text")
            .attr("x", d => projection(d.geometry.coordinates)[0])
            .attr("y", d => projection(d.geometry.coordinates)[1])
            .attr('dy', d => -2*radScale(d.properties.POP_MAX))
            .attr("stroke", function(){
                if(THEME == "dark"){return "var(--bs-gray-dark)"}
                return "white";
            })
            .attr("fill", function(){
                if(THEME == "dark"){return "var(--bs-gray-dark)"}
                return "white";
            })
            .style('font-size', d => textScale(d.properties.POP_MAX)+"rem")
            .attr("letter-spacing", "2px")
            .attr("text-anchor", "start")
            .text(d => d.properties.NAME);

            // get bb of text
            function getBB(selection) {
                selection.each(function(d){d.bbox = this.getBBox();})
            }
            
        }

    </script>
</head>