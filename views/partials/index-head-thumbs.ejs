<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <title>Wiki Metal Vis</title>

    <!--<link rel="shortcut icon" type="image/jpg" href="/images/favicon.jpg"/> -->
    <!--<script src="./javascripts/forceGraph.js"></script>-->
    <script src="./javascripts/global.js"></script>
    <script src="./javascripts/views.js"></script>
    <!--<script src="https://d3js.org/d3.v4.min.js"></script>-->
    <script src="https://d3js.org/d3.v6.js"></script>
    <script src="https://unpkg.com/d3-force-boundary@0.0.1/dist/d3-force-boundary.min.js"></script> <!--d3 force boundary add on-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Turf.js/5.1.5/turf.min.js"></script><!--turf for d3 winding order-->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link href="https://fonts.cdnfonts.com/css/iomanoid" rel="stylesheet"> <!--font-->
    <link href="https://fonts.cdnfonts.com/css/metal-lord" rel="stylesheet"><!--font-->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Honk"><!--Google font-->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Permanent+Marker"><!--Google font-->
    <link href="https://fonts.googleapis.com/css2?family=Luckiest+Guy&display=swap" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Wendy+One&display=swap" rel="stylesheet">
    <link rel='stylesheet' href='/stylesheets/style-shorts.css' />
    <link rel="stylesheet" href="https://unpkg.com/tippy.js@6/themes/translucent.css"/>
    <link rel="stylesheet" href="https://unpkg.com/tippy.js@6/animations/scale.css"/>
    <script type="text/javascript">

        // get data from controller
        let thrash_bands = JSON.parse(<%-JSON.stringify(ejs_thrash_bands)%>);
        let black_bands = JSON.parse(<%-JSON.stringify(ejs_black_bands)%>);
        let death_bands = JSON.parse(<%-JSON.stringify(ejs_death_bands)%>);
        let power_bands = JSON.parse(<%-JSON.stringify(ejs_power_bands)%>);
        let heavy_bands = JSON.parse(<%-JSON.stringify(ejs_heavy_bands)%>);
        let speed_bands = JSON.parse(<%-JSON.stringify(ejs_speed_bands)%>);
        let world_places = JSON.parse(<%-JSON.stringify(ejs_places)%>);
        let world_states = JSON.parse(<%-JSON.stringify(ejs_states)%>);
        let world_states_back = JSON.parse(<%-JSON.stringify(ejs_states_back)%>);
        let world_regions = JSON.parse(<%-JSON.stringify(ejs_world_regions)%>);
        let world_boundaries = JSON.parse(<%-JSON.stringify(ejs_map_countries)%>);
        let world_boundaries_back = JSON.parse(<%-JSON.stringify(ejs_map_countries_back)%>);
        let us_counties = JSON.parse(<%-JSON.stringify(ejs_counties)%>);
        let us_states = JSON.parse(<%-JSON.stringify(ejs_us_states)%>);
        let canada_divisions = JSON.parse(<%-JSON.stringify(ejs_can_divs)%>);
        let german_divisions = JSON.parse(<%-JSON.stringify(ejs_german_divs)%>);
        let aus_divisions = JSON.parse(<%-JSON.stringify(ejs_aus_divs)%>);
        let uk_divisions = JSON.parse(<%-JSON.stringify(ejs_uk_divs)%>);
        let german_states = JSON.parse(<%-JSON.stringify(ejs_german_states)%>);
        let metal_continents = JSON.parse(<%-JSON.stringify(ejs_continents)%>);
        let us_state_data = JSON.parse(<%-JSON.stringify(ejs_state_data)%>);

        // global units
        let vhu;
        let vwu;

        // global functions
        let update_chart;

        // HERE WSR in Greece, N,A,OP in Netherlands

        // global vars and objects
        let animate_timeout;
        let current_projection;
        let simulation;
        let us_region = ""; // see death_data 4 midwest international bands when SHORTS
        let world_region = ""; 
        let region = "California"; // "California" "United Kingdom"
        let display_region = "US"; // World US
        let grouped_region = false;
        let display_continent = "North America"; // not used
        let pop_max = 150000000000;
        let THEME = "dark";
        let current_year = 1980;
        let cap = 120; // southeast asia death 77,greece 77 south thrash 100, norway black 80, sweden black 80, finland black 80, poland 85, uk desth 85, samer thrash 80, camer thrash 90, northeast thrash 80, northeast death 82 (- 2 from sweden) cali thrash 80, florida death 82
        let prev_year;
        let nodes = [];
        let links = [];
        let display_bands_list = [];
        let lookup = {};
        let display_bands = {"heavy":false,"thrash":false, "black":false, "death":false, "power":false, "speed":false};
        let display_genre = "heavy";
        let changes = false;
        let changes_add = false;
        let changes_remove = false;
        let image_width = 0;
        let base_image_width = 95;
        let min_image_height = 0;
        let max_image_height = 0;
        var timeout = 12000;
        var views;
        let animate = false;
        let map_region;
        let bi = 0; // band index for shorts
        let short_start = false;
        
        let projections = {getProjection: function(region, width, height, fixed_states){

                // map view settings from object
                if(region in map_settings){
                    var mapView = map_settings[region];
                    return d3.geoMercator() // geoMercator
                        .center(mapView.centre)
                        .translate([width/2, height/2])
                        .scale(mapView.scale);
                }
                else{ // general fit with padding
                    var padding = 0;
                    if(region in pads){
                        padding = pads[region];
                    }
                    return d3.geoMercator() // ,{"type": "FeatureCollection","features":fixed_states}
                        .fitExtent([[padding, padding], [width-padding,height-padding]], {"type": "FeatureCollection","features":fixed_states});
                }
            }
        }

        // DOM loaded callback
		document.addEventListener('DOMContentLoaded', function() {

            // d3 and geojson
            // https://www.d3indepth.com/geographic/
            // https://github.com/martynafford/natural-earth-geojson/blob/master/10m/cultural/ne_10m_populated_places.json

            // natural earth country names
            // https://unstats.un.org/unsd/methodology/m49/

            // International bands that are US appear in b/w Denver and Kansas

           // log data
           console.log(thrash_bands);
           console.log(black_bands);
           console.log(death_bands);
           console.log(power_bands);
           console.log(heavy_bands);
           console.log(speed_bands);
           console.log(world_places);
           console.log(world_states);
           console.log(world_regions);
           console.log(world_boundaries);
           console.log(us_counties);
           console.log(us_states);
           console.log(metal_continents);
           console.log(us_state_data);
           console.log(german_divisions);
           console.log(aus_divisions);

           // add middle eastern disputed territories
           world_regions["Middle East"].push("West Bank");
           world_regions["Middle East"].push("Northern Cyprus");

           // add Czechia Republic
           world_regions["Central Europe"].push("Czech Republic");

           // add Republic of Serbia
           world_regions["The Balkans"].push("Republic of Serbia");
           world_regions["The Balkans"].push("Macedonia");

           // remove yemen and oman (no bands)
           world_regions["Middle East"] = world_regions["Middle East"].filter(item => item != "Yemen" && item != "Oman")

           // umique cities
           let unique_cities = world_places.features.map(prop => prop.properties.NAME_EN);
           unique_cities.sort();
           console.log(unique_cities);

           // umique countries
           let all_countries = world_states.features.map(prop => prop.properties.admin);
           let unique_countries = [...new Set(all_countries)];
           unique_countries.sort();
           console.log(unique_countries);

           // umique russian districts (for filtering)
           let all_russia = world_states.features.filter(prop => prop.properties.admin == "Russia");
           all_russia_names = all_russia.map(prop => prop.properties.name);
           let unique_russia = [...new Set(all_russia_names)];
           unique_russia.sort();
           console.log(unique_russia);
           
           // global units
           vhu = parseFloat(window.innerHeight/100);
           vwu = parseFloat(window.innerWidth/100);
           console.log("height and width window units");
           console.log(vhu);
           console.log(vwu);

           // set chart height (bootstrap determines width)
           document.getElementById("plot_div").style.height = "98vh";

           // event listeners
           document.getElementById('yearControl').addEventListener("click", handleNewBand);

           // set year and area display
           //document.getElementById("yearDisplay").innerHTML = current_year;
           if(!(grouped_region)){
                document.getElementById("regionDisplay").innerHTML = region.toUpperCase();
           }
           else{// will need to update for world continents
                if(display_region == "US"){
                    document.getElementById("regionDisplay").innerHTML = "US " + us_region.toUpperCase();
                }
                else{
                    document.getElementById("regionDisplay").innerHTML = world_region.toUpperCase();
                }
           }

           // set genre from display string
           for(let band in display_bands){
            if(band == display_genre){
                display_bands[band] = true;
            }
            else{
                display_bands[band] = false;
            }
           }

           // set genre display and views
           var genre_display = document.getElementById('genreHeader');
           if(display_bands["thrash"]){
            views = thrash_views;
            genre_display.innerHTML = "Thrash Metal"}
           else if(display_bands["death"]){
            views = death_views;
            genre_display.innerHTML = "Death Metal"}
           else if(display_bands["power"]){
            views = power_views;
            genre_display.innerHTML = "Power Metal"}
           else if(display_bands["speed"]){
            views = power_views;
            genre_display.innerHTML = "speed Metal"}
           else if(display_bands["heavy"]){
            views = heavy_views;
            genre_display.innerHTML = "heavy Metal"}
           else{
            views = black_views;
            genre_display.innerHTML = "Black Metal"}

           // init draggable controls
           dragElement(document.getElementById("controls"));
           dragElement(document.getElementById("genreContainer"));

           // set background 
           document.body.style.backgroundColor = "black";
    
           // create bands list and lookup
           display_bands_list = create_bands_list();
           lookup = create_lookup(display_bands_list);

           // filter bands here Trono, Tsala (Remove big logos for thumbs as well)
           var omit_bands = ["Ash Pool","Funereal Presence", "One Master", "Acid Age", "Orv","Towards Rusted Soil","Battle Gargoyle","WSR", "Trono", "Tsalal", "Kat", "Vestígio", "NordVinter",
                               "Dark Fortress","Thron", "Lantlôs","Darkened Nocturn Slaughtercult", "Tha-Norr",  "Verdunkeln","Temple of Abraxas", "Uamh", "Mania", "Seke Nipahem","Ash", "Orgy of Carrion", "Kryatjurr of Desert Ahd",
                                "Lorn","Vowels","Nott","Iperyt"];
           var omit_wall_bands = ["Metallica","Megadeth", "JRS","Cracked Vessel", "Kat", "Battle Gargoyle","WSR","Orv","Towards Rusted Soil","Kryatjurr of Desert Ahd"];
           display_bands_list = display_bands_list.filter(band => !omit_wall_bands.includes(band.name));

           // filter ouut made logos (NOTE: they don't have image size for heavy)
           display_bands_list = display_bands_list.filter(band => band.genre != "made");
        
           // sort bands list (local or world) ['active_years'][0]
           display_bands_list.sort(function(a, b) { 
                //return a.local_rank - b.local_rank;
                return a['active_years'][0] - b['active_years'][0];
            })

            console.log(display_bands_list);

           // set map region
           if(display_region == "World"){
            if(grouped_region){map_region = world_region;}
            else{map_region = region;}
           }
           else{
            if(grouped_region){map_region = us_region;}
            else{map_region = region;}
           }
            
           draw_map();
           draw_all_logos();

           //display_shorts_band();
           //update_chart();
           
           // start animation
           //setTimeout(function(){
            //animate_timeout = setInterval(myFunction, timeout);
           //}, 25000);
           

         }, false);

         function draw_all_logos(){

            // container for logos
            var logo_container = document.getElementById('genreContainer');

            for(let i=0;i<display_bands_list.length;i++){

                // get current index band
                var band = display_bands_list[i];

                // band logo
                var logo_path = "/logos_transparent/" + band['genre'] + 
                "/"+ band['local_region'] + "/" + band['logo'];

                // handle old modified images
                if(band['genre'] == "modified"){
                    var logo_path = "/logos_transparent/" + band['genre'] + "/" + band['logo'];

                }

                // check band names
                if(i == 62){
                    console.log(band['name']);
                    console.log(logo_path);
                }

                // create image tag
                var band_image_tag = document.createElement('img');
                band_image_tag.style.display = "inline";

                // set image properties
                var image_width = 70;
                if(band['name'] == 'N.A.O.P.'){ // tall bands
                    band_image_tag.setAttribute("height", 100);
                    band_image_tag.setAttribute("src", logo_path);

                }
                else if(band['name'] == 'Alcest'){ // tall bands
                    band_image_tag.setAttribute("height", 100);
                    band_image_tag.setAttribute("src", logo_path);

                }// 
                else if(band['name'] == 'Black Murder'){ // tall bands
                    band_image_tag.setAttribute("height", 100);
                    band_image_tag.setAttribute("src", logo_path);

                }
                else if(band['name'] == '原罪'){ // tall bands
                    band_image_tag.setAttribute("height", 60);
                    band_image_tag.setAttribute("src", logo_path);

                }
                else if(band['name'] == 'Förgjord'){ // tall bands
                    band_image_tag.setAttribute("height", 100);
                    band_image_tag.setAttribute("src", logo_path);

                }
                else if(band['name'] == 'Saturnian Mist'){ // tall bands
                    band_image_tag.setAttribute("height", 70);
                    band_image_tag.setAttribute("src", logo_path);

                }
                else if(band['name'] == 'Paara'){ // tall bands
                    band_image_tag.setAttribute("height", 70);
                    band_image_tag.setAttribute("src", logo_path);

                }
                else if(band['name'] == 'Musta Surma'){ // tall bands
                    band_image_tag.setAttribute("height", 70);
                    band_image_tag.setAttribute("src", logo_path);

                }
                else if(band['name'] == 'Heathen Deity'){ // tall bands
                    band_image_tag.setAttribute("height", 70);
                    band_image_tag.setAttribute("src", logo_path);

                }
                else if(band['name'] == 'Rosaceae'){ // tall bands
                    band_image_tag.setAttribute("height", 70);
                    band_image_tag.setAttribute("src", logo_path);

                }// 
                else if(band['name'] == 'The Unsane'){ // tall bands
                    band_image_tag.setAttribute("height", 70);
                    band_image_tag.setAttribute("src", logo_path);
                    band_image_tag.style.marginLeft = "21px"; // add margin for lhs
                    band_image_tag.style.marginRight = "21px";
                }
                else if(band['name'] == 'Lo-Ruhamah'){ // tall bands
                    band_image_tag.setAttribute("height", 70);
                    band_image_tag.setAttribute("src", logo_path);
                    band_image_tag.style.marginLeft = "20px"; // add margin for lhs
                    band_image_tag.style.marginRight = "20px";

                }
                else if(band['name'] == 'Skeleton of God'){ // tall bands
                    band_image_tag.setAttribute("height", 70);
                    band_image_tag.setAttribute("src", logo_path);
                    band_image_tag.style.marginLeft = "14px"; // add margin for lhs
                    band_image_tag.style.marginRight = "14px";
                }
                else if(band['name'] == 'Cirith Ungol'){ // tall bands
                    band_image_tag.setAttribute("height", 70);
                    band_image_tag.setAttribute("src", logo_path);
                    band_image_tag.style.marginLeft = "14px"; // add margin for lhs
                    band_image_tag.style.marginRight = "14px";
                }
                else if(band['name'] == 'Faceless and Descending'){ // tall bands
                    band_image_tag.setAttribute("height", 70);
                    band_image_tag.setAttribute("src", logo_path);
                    band_image_tag.style.marginLeft = "14px"; // add margin for lhs
                    band_image_tag.style.marginRight = "14px";
                }
                else if(band['name'] == 'Sleep White Winter'){ // tall bands
                    band_image_tag.setAttribute("height", 70);
                    band_image_tag.setAttribute("src", logo_path);
                    band_image_tag.style.marginLeft = "14px"; // add margin for lhs
                    band_image_tag.style.marginRight = "14px";
                }// 
                else if(band['name'] == 'X-Cops'){ // tall bands
                    band_image_tag.setAttribute("height", 70);
                    band_image_tag.setAttribute("src", logo_path);
                    band_image_tag.style.marginLeft = "14px"; // add margin for lhs
                    band_image_tag.style.marginRight = "14px";
                }
                else if(band['name'] == 'Łatanu'){ // tall bands
                    band_image_tag.setAttribute("height", 70);
                    band_image_tag.setAttribute("src", logo_path);
                    band_image_tag.style.marginLeft = "14px"; // add margin for lhs
                    band_image_tag.style.marginRight = "14px";
                }
                else if(band['name'] == 'Thorium'){ // tall bands
                    band_image_tag.setAttribute("height", 55);
                    band_image_tag.setAttribute("src", logo_path);
                    band_image_tag.style.marginLeft = "14px"; // add margin for lhs
                    band_image_tag.style.marginRight = "14px";
                }
                else{ //
                    band_image_tag.setAttribute("width", image_width);
                    band_image_tag.setAttribute("src", logo_path);
                }
                

                // add to container
                logo_container.appendChild(band_image_tag);

                // new line
                if((i+1) % 10 == 0){
                    var br_tag = document.createElement('br');
                    logo_container.appendChild(br_tag);
                }

               
            }
         }

         function display_channel(){

            // show band info
            document.getElementById("bandInfo").style.display = "none";

            // set channel logo
            var logo_path = "/images/new-log-raw_mod.png";
            var band_image_tag = document.getElementById('bandLogo');
            band_image_tag.setAttribute("src", logo_path);
            band_image_tag.setAttribute("width", 176);

            // channel plug
            var band_name_tag = document.getElementById('nameDisplay');
            band_name_tag.innerHTML = "See the Animation";

            d3.select("#genreContainerheader").style("opacity", 0)
            .transition().duration(500).style("opacity", 1);

         }

         // draw a band logo and info
         function display_shorts_band(){

            // show band info
            document.getElementById("bandInfo").style.display = "none";

            // get current index band
            var band = display_bands_list[bi];

            // handle channel 'nodes'
            var channel = false;
            if(band['name'] == "Watch the Animation"){
                // hide band info
                document.getElementById("bandInfo").style.display = "none";
                channel = true;
            }

            // band logo
            var logo_path = "/logos_transparent/" + band['genre'] + 
            "/"+ band['local_region'] + "/" + band.logo;

            // channel image path
            if(channel){
                var logo_path = "/images/new-log-raw_mod.png";
            }

           
            // logo width
            // set from image wwidth and adjust
            var image_width = 196;
            var max_image_height =  100;
            var image_size = band['image_size'];
            var image_height = (image_width/image_size[0]) * image_size[1];
            var tall = false;

            if(image_height > max_image_height){
                image_width = (max_image_height/image_size[1]) * image_size[0];
                tall = true;
            
            }
            
            // set image size and container size
            var band_image_tag = document.getElementById('bandLogo');
            band_image_tag.style.display = "none";
            document.getElementById("genreContainerheader").style.opacity = 0;
            document.getElementById("genreContainerheader").style.width =  image_width+"px";
            band_image_tag.setAttribute("width", image_width); // set by size of container and padding
            

            // set genreContainer left based from controls for tall images
            if(tall){
                var controls_div =  document.getElementById("controls");
                var controls_bbox = controls_div.getBoundingClientRect();

                var middle =  controls_bbox.x + controls_bbox.width/2;
                document.getElementById("genreContainer").style.left = (middle - image_width/2 - 12) + "px";

                // change font size
                document.getElementById("nameDisplay").style.fontSize = "1rem";

                // set height and width (stretch option)
                var stretch_bands = ["Cattle Decapitation", "Nithing", "Vanity 4"];
                if(stretch_bands.includes(band['name'])){
                    document.getElementById("genreContainerheader").style.width =  "172px";
                    document.getElementById("genreContainer").style.left = (middle - 172/2 - 12) + "px";
                    band_image_tag.setAttribute("height",max_image_height); // max_image_height
                    band_image_tag.setAttribute("width", 172);
                }
                
            }
            else{ // default left
                document.getElementById("genreContainer").style.left = "45%";

                // change font size back
                document.getElementById("nameDisplay").style.fontSize = "1.5rem";
            }
            
            // set logo path
            band_image_tag.setAttribute("src", logo_path);
            band_image_tag.style.display = "block";

            // band name
            var band_name_tag = document.getElementById('nameDisplay');
            var band_name = band['name'];
            if(band_name == "Fuck Off"){band_name = "F**k Off";}
            if(band_name == "Social Shit"){band_name = "Social S**t";}
            band_name_tag.innerHTML = band_name;
            
            // year started
            var band_year_tag = document.getElementById('yearDisplay');
            band_year_tag.innerHTML = band['active_years'][0];

            // origin 
            var band_year_tag = document.getElementById('originDisplay');
            band_year_tag.innerHTML = band['origin_str'].replace("Portland, Oregon", "Oregon");

            // reshow
            if(!(channel)){
                // show band info
                document.getElementById("bandInfo").style.display = "block";
            }

            d3.select("#bandLogo").style("opacity", 0)
            .transition().duration(400).style("opacity", 1);

            d3.select("#nameDisplay").style("opacity", 0)
            .transition().duration(400).style("opacity", 1);
            
            d3.select("#genreContainerheader").style("opacity", 0)
            .transition().duration(400).style("opacity", 1);

            /* UPDATE MAP */
            // add to nodes and links
            var genre = display_genre; // back compat with main code
            var new_base_node = {"id": "base" + display_genre + band['index'], "type":display_genre, "nodeType":"base",
                                    "lat":band['loc']['latitude'], "long":band['loc']['longitude'], "logo": band['logo'],
                                    "fx": current_projection([band['loc']['longitude'], band['loc']['latitude']])[0],
                                    "fy": current_projection([band['loc']['longitude'], band['loc']['latitude']])[1],
                                    "x": current_projection([band['loc']['longitude'], band['loc']['latitude']])[0],
                                    "y": current_projection([band['loc']['longitude'], band['loc']['latitude']])[1],
                                    "image_size": band["image_size"], "name": band["name"], "genre": band["genre"], "local_region":band["local_region"]};

            // logo position
            var image_tag = document.getElementById('bandLogo');
            var image_box = image_tag.getBoundingClientRect();
            var logo_x =  image_box.x + image_box.width/2;
            var logo_y =  image_box.y + image_box.height/2;

            var new_band_node = {"id": "band" + genre + band['index'], "type":genre, "nodeType":"band",
                    "lat":band['loc']['latitude'], "long":band['loc']['longitude'], "logo": band['logo'],
                    "fx": logo_x,
                    "fy": logo_y,
                    "x": logo_x,
                    "y": logo_y,
                    "image_size": band["image_size"], "origin": band['origin'], "name": band["name"], "genre": band["genre"], "local_region":band["local_region"]};

            var new_link = {"source":"base" + genre + band['index'], 
                        "target":"band" + genre + band['index'],
                        "type":genre, "image_size": band["image_size"], "name": band["name"]};

            links = []; // reset           
            if(!(channel)){
                nodes.push(new_base_node);
                nodes.push(new_band_node);
                links.push(new_link);
            }
            
            // draw chart
            update_chart();

         }

         // varying time interval animation
         var myFunction = function(){
            
            clearInterval(animate_timeout);
            
            // update the map
            bi += 1;
            if(bi >= cap + 2){  // plus 2 for channel nodes
                return;}
            
            display_shorts_band();
            
            timeout = 1325;
            animate_timeout = setInterval(myFunction, timeout);
            
        }
       
        

         // animate function
         function animate_simple(){
           
            animate_timeout = setInterval(function(){
                var year_display = document.getElementById("yearDisplay");
                prev_year = current_year;
                current_year += 1;
                year_display.innerHTML = current_year;
                update_graph_all_genres();
                if(current_year == 2024){clearInterval(animate_timeout);}
            }, 8000)
         }

         /* EVENT HANDLERS*/
         function handleNewBand(event){

            // get direction and handle
            var direction = event.target.id;

            // next band
            bi += 1;
            if(bi >= cap + 2){return;}
            display_shorts_band();



         }
         function handleYear(event){

            // stop animation
            timeout = 0;
            clearInterval(animate_timeout);

            // get direction and handle
            var direction = event.target.id;
            var year_display = document.getElementById("yearDisplay");

            if(direction=='left'){
                if(current_year == 1973){
                    return;
                }
                else{
                    prev_year = current_year;
                    current_year -= 1;
                    year_display.innerHTML = current_year;
                    update_graph_all_genres();
                    return;
                }
            }

            if(direction=='right'){
                if(current_year == 2024){
                    return;
                }
                else{
                    prev_year = current_year;
                    current_year += 1;
                    year_display.innerHTML = current_year;
                    update_graph_all_genres();
                    return;
                }
            }
         }

         //** create and update all (NOTE: remove genres and if)
         function create_graph_all_genres(){
            if(display_bands["thrash"]){
                create_graph(current_projection, lookup, display_bands_list, "thrash");
            }

            if(display_bands["black"]){
                create_graph(current_projection, lookup, display_bands_list, "black");
            }

            if(display_bands["death"]){
                create_graph(current_projection, lookup, display_bands_list, "death");
            }

            if(display_bands["power"]){
                create_graph(current_projection, lookup, display_bands_list, "power");
            }

            if(display_bands["heavy"]){
                create_graph(current_projection, lookup, display_bands_list, "heavy");
            }

            if(display_bands["speed"]){
                create_graph(current_projection, lookup, display_bands_list, "speed");
            }
    
         }

         function update_graph_all_genres(){
            if(display_bands["thrash"]){
                update_graph(current_projection, lookup, display_bands_list, "thrash");
            }

            if(display_bands["black"]){
                update_graph(current_projection, lookup, display_bands_list, "black");
            }

            if(display_bands["death"]){
                update_graph(current_projection, lookup, display_bands_list, "death");
            }

            if(display_bands["power"]){
                update_graph(current_projection, lookup, display_bands_list, "power");
            }

            if(display_bands["heavy"]){
                update_graph(current_projection, lookup, display_bands_list, "heavy");
            }

            if(display_bands["speed"]){
                update_graph(current_projection, lookup, display_bands_list, "speed");
            }
            update_chart();
            changes = false;
            changes_add = false;
            changes_remove = false;
         }

         //** check functions

         // check if country in continent
         function in_continent(country){
            for(let i in metal_continents){
                if(metal_continents[i]["name"] == country){
                    if(metal_continents[i]["continent"] == display_continent){
                        return true;
                    }
                    else{
                        return false;
                    }
                }
            }
            return false;
         }

         // check if us state in region
         function in_us_region_fips(state){
            for(let i in us_state_data){
                if(us_state_data[i]["fips_code"] == state){
                    if(us_state_data[i]["region"] == us_region){
                        return true;
                    }
                    else{
                        return false;
                    }
                }
            }
            return false;
         }

         // get us state name from fips code
         function get_name_from_fips(fips){
            for(let i in us_state_data){
                if(us_state_data[i]["fips_code"] == fips){
                    return us_state_data[i]["name"];
                }
            }
            return "";

         }

         // check if country in world region
         function in_world_region(country){
            return world_regions[world_region].includes(country);
         }

         // check if us state in region
         function in_us_region_name(state){
            for(let i in us_state_data){
                if(us_state_data[i]["name"] == state){
                    if(us_state_data[i]["region"] == us_region){
                        return true;
                    }
                    else{
                        return false;
                    }
                }
            }
            return false;
         }

         // filter band list initially !!
         function create_bands_list(){
            var bands = [];
            if(display_genre == "thrash"){
                var search_bands = thrash_bands;
            }
            else if(display_genre == "death"){
                var search_bands = death_bands;
            }
            else if(display_genre == "power"){
                var search_bands = power_bands;
            }
            else if(display_genre == "heavy"){
                var search_bands = heavy_bands;
            }
            else if(display_genre == "speed"){
                var search_bands = speed_bands;
            }
            else{
                var search_bands = black_bands;
            }

            for(let band of search_bands){
                // US
                if((!(grouped_region) && band['local_rank'] <= cap && display_region == "US" && band['loc']['state'] == region) || 
                        (grouped_region && band['region_rank'] <= cap && display_region == "US" && in_us_region_name (band['loc']['state']))){
                    bands.push(band);

                }

                // World
                if((!(grouped_region) && band['local_rank'] <= cap && display_region == "World" && band['loc']['country'] == region) || 
                        (grouped_region && band['region_rank'] <= cap && display_region == "World" && in_world_region (band['loc']['country']))){
                    bands.push(band);

                }

            }

            return bands;
         }

         // create the lookup data structure
         function create_lookup(bands_list){
            var lookup = {};
            for(let i = 1963; i <= 2025; i++){
                lookup[i] = [];
            }
            for(let band of bands_list){
                for(let year of band['active_years']){
                    lookup[year].push(band['index']);
                }
            }
            return lookup;
         }

         //** update graph
         function update_graph(projection, lookup, bands, genre){
            
            // get indexes
            var prev_band_indexes = lookup[prev_year];
            var curr_band_indexes = lookup[current_year];

            // bands to add/remove
            var add_indexes = curr_band_indexes.filter(i => !prev_band_indexes.includes(i));
            var remove_indexes = prev_band_indexes.filter(i => !curr_band_indexes.includes(i));

            // create new nodes and links
            for(let a of add_indexes){

                // get band
                var band = bands.filter(o => o.index == a)[0];

                // lookup has all of world, filter first?
                if(band == undefined){continue;}

                if(band['genre'] == 'made'){continue;} // skipping made

                changes = true;
                changes_add = true;

                // create nodes (2 for eaach band)
                var new_base_node = {"id": "base" + genre + band['index'], "type":genre, "nodeType":"base",
                                        "lat":band['loc']['latitude'], "long":band['loc']['longitude'], "logo": band['logo'],
                                        "fx": projection([band['loc']['longitude'], band['loc']['latitude']])[0],
                                        "fy": projection([band['loc']['longitude'], band['loc']['latitude']])[1],
                                        "x": projection([band['loc']['longitude'], band['loc']['latitude']])[0],
                                        "y": projection([band['loc']['longitude'], band['loc']['latitude']])[1],
                                        "image_size": band["image_size"], "name": band["name"], "genre": band["genre"], "local_region":band["local_region"]};

                var new_band_node = {"id": "band" + genre + band['index'], "type":genre, "nodeType":"band",
                "lat":band['loc']['latitude'], "long":band['loc']['longitude'], "logo": band['logo'],
                "x": projection([band['loc']['longitude'], band['loc']['latitude']])[0],
                "y": projection([band['loc']['longitude'], band['loc']['latitude']])[1],
                "vx": 0.0,
                "vy":0.0,
                "image_size": band["image_size"], "origin": band['origin'], "name": band["name"], "genre": band["genre"], "local_region":band["local_region"]};

                var new_link = {"source":"base" + genre + band['index'], 
                                "target":"band" + genre + band['index'],
                                "type":genre, "image_size": band["image_size"], "name": band["name"]};
                nodes.push(new_base_node);
                nodes.push(new_band_node);
                links.push(new_link);
            
            }

            // remove nodes and links
            for(let r of remove_indexes){

                // get band
                var band = bands.filter(o => o.index == r)[0];

                // lookup has all of world, filter first?
                if(band == undefined){continue;}

                // remove 2 nodes
                nodes = nodes.filter(obj => obj.id != "band" + genre + band['index'] && obj.id != "base" + genre + band['index']);
            
                // remove link
                links = links.filter(obj => obj.source.id != "base" + genre + band['index']);

                changes = true;
                changes_remove = true;
            }
         }

         //** create a graph of nodes and edges by current year (initial)
         function create_graph(projection, lookup, bands, genre){

            // current year thrash indexes
            var indexes = lookup[current_year];
            for(let band of bands){

                if(indexes.includes(band['index'])){
                    if(band['genre'] == 'made'){continue;} // skipping made
                    
                    // create nodes (2 for eaach band) and link
                    var new_base_node = {"id": "base" + genre + band['index'], "type":genre, "nodeType":"base",
                                    "lat":band['loc']['latitude'], "long":band['loc']['longitude'], "logo": band['logo'],
                                    "fx": projection([band['loc']['longitude'], band['loc']['latitude']])[0],
                                    "fy": projection([band['loc']['longitude'], band['loc']['latitude']])[1],
                                    "x": projection([band['loc']['longitude'], band['loc']['latitude']])[0],
                                    "y": projection([band['loc']['longitude'], band['loc']['latitude']])[1],
                                    "image_size": band["image_size"], "name": band["name"], "genre": band["genre"], "local_region":band["local_region"]};

                    var new_band_node = {"id": "band" + genre + band['index'], "type":genre, "nodeType":"band",
                    "lat":band['loc']['latitude'], "long":band['loc']['longitude'], "logo": band['logo'],
                    "x": projection([band['loc']['longitude'], band['loc']['latitude']])[0],
                    "y": projection([band['loc']['longitude'], band['loc']['latitude']])[1],
                    "vx": 0.0,
                    "vy":0.0,
                    "image_size": band["image_size"], "origin": band['origin'], "name": band["name"], "genre": band["genre"], "local_region":band["local_region"]};

                    var new_link = {"source":"base" + genre + band['index'], 
                                "target":"band" + genre + band['index'],
                                "type":genre, "image_size": band["image_size"], "name": band["name"]};

                    nodes.push(new_base_node);
                    nodes.push(new_band_node);
                    links.push(new_link);
                }
                
            }
         }

         //** create a graph of nodes and edges by current year (initial)
         // needs updating for new data
         function create_world_graph(projection, lookup, bands, genre){

            // current year thrash indexes
            for(let band of bands){
                // create nodes (2 for eaach band) and link
                var new_base_node = {"id": "base" + genre + band['index'], "type":genre, "nodeType":"base",
                                "lat":band['loc']['latitude'], "long":band['loc']['longitude'], "logo": band['logo'],
                                "fx": projection([band['loc']['longitude'], band['loc']['latitude']])[0],
                                "fy": projection([band['loc']['longitude'], band['loc']['latitude']])[1],
                                "x": projection([band['loc']['longitude'], band['loc']['latitude']])[0],
                                "y": projection([band['loc']['longitude'], band['loc']['latitude']])[1],
                                "image_size": band["image_size"], "genre": band["genre"], "local_region":band["local_region"]};

                var new_band_node = {"id": "band" + genre + band['index'], "type":genre, "nodeType":"band",
                "lat":band['loc']['latitude'], "long":band['loc']['longitude'], "logo": band['logo'],
                "x": projection([band['loc']['longitude'], band['loc']['latitude']])[0],
                "y": projection([band['loc']['longitude'], band['loc']['latitude']])[1],
                "image_size": band["image_size"], "origin": band['origin'], "genre": band["genre"], "local_region":band["local_region"]};

                var new_link = {"source":"base" + genre + band['index'], 
                            "target":"band" + genre + band['index'],
                            "type":genre, "image_size": band["image_size"]};

                nodes.push(new_base_node);
                nodes.push(new_band_node);
                links.push(new_link);
                
            }
         }

         function draw_map(){
            // get width and height of plot area
            var plot_area = document.getElementById("plot_div");
            var plot_height = plot_area.offsetHeight;
            var plot_width = plot_area.offsetWidth;

            // set the dimensions and margins of the plot 
            // NOTE: dont use for map margind, use padding var in projections instead
            var margin = {top: 0, 
                        right:0, 
                        bottom: 0, 
                        left: 0};

            // chart width and height (leaving names from old code)
            var width = plot_width - margin.left - margin.right;
            var height = plot_height - margin.top - margin.bottom;

            // remove any elements in plot area
            while (plot_area.firstChild) {
                plot_area.removeChild(plot_area.firstChild);
            }

            // zoom
            function zoomed(event) {
                const {transform} = event;
                svg.attr("transform", transform);
                //svg.attr("stroke-width", 1 / transform.k);  
            }

            let zoom = d3.zoom()
                .scaleExtent([0.1, 200])
                .on('zoom', zoomed);

            // append the svg object to the plot area
            var svg = d3.select("#plot_div")
            .append("svg")
                .attr("id" , "svgArea")
                .attr("width", width)
                .attr("height", height)
                .attr("viewBox", [0, 0, width, height]) // add zoom here to avoid pan jitter
                .attr("style", "width: 100%; height: auto; height: intrinsic;")
                .style("background-color", function(){
                    if(THEME == "dark"){return "black";}
                    return "white";
                })
                .call(zoom)
            .append("g")
                .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");

            // clip path def
            svg.append("defs").append("svg:clipPath")
                .attr("id", "clipID") // don't use same id in other charts
                .append("svg:rect")
                .attr("width", width)
                .attr("height", height)
                .attr("x",0)
                .attr("y",0);
            

            // set map colour and base colour
            // https://simplicable.com/colors/dark-yellow-color ... another color site
            // midnight green .... #004955
            // carribean current .... #105E60
            // darkolive .... #373F38
            // darkslategrey
            // onyx .... #444243
            // crystal teal ... #00637c
            // vintage violet ... #634f62
            // golden brown .... #9B773D
            // bright brown .... #936D58
            // teal .... #016764
            // gunmetal ... #2B3C43
            // blue ... #1B435E
            // lightbrown ... #775E59
            // darklime .... #827717
            // darkgoldenrod
            // lime ... #9E9D24
            // bluegrey ... #607D8B
            let mapColour = ""; // 57,57,57 is background cut-off for alpha
            let baseColour = "";
            let boundaryColour = "";
            if(display_genre == "thrash"){ //  bright brown?  https://icolorpalette.com/download/palette/535890_color_palette.jpg
                mapColour = "#827717";  
                baseColour = "lightyellow"; 
                boundaryColour = "black";
                
            }
            else if(display_genre == "black"){ // teal 
                mapColour = "#016764";  
                baseColour = "aliceblue";
                boundaryColour = "black";
            }
            else if(display_genre == "death"){ //  gunmetal
                mapColour = "darkslategrey"; 
                baseColour = "antiquewhite"; 
                boundaryColour = "black";
                
            }
            else if(display_genre == "power"){//  crystal teal
                mapColour = "#00637c"; 
                baseColour = "beige";
                boundaryColour = "black";
            }
            else if(display_genre == "speed"){ //  
                mapColour = "#775E59"; //  light brown
                baseColour = "cornsilk";
                boundaryColour = "black";
            }
            else if(display_genre == "heavy"){  // vintage violet
                mapColour = "#634f62"; 
                baseColour = "honeydew";
                boundaryColour = "black";
            }
            else if(display_genre == "groove"){ // darkslategrey
                mapColour = "darkslategrey";
                baseColour = "linen";
                boundaryColour = "black";
            }
            else{ // all metal.
                mapColour = "#444243"; // onyx
                baseColour = "lightblue"; // whitesmoke
                boundaryColour = "black";
            }

            
            //** grads and filters
            //svg = create_light_filter(svg, "lightskyblue");
           // svg = create_light_filter(svg, "whitesmoke");
            //svg = create_light_filter(svg, "antiquewhite"); // reddish for Death
            //svg = create_light_filter(svg, "beige");
            svg = create_light_filter(svg, baseColour);
            //svg = create_light_filter(svg, "cornsilk");
            //svg = create_light_filter(svg, "honeydew");
            svg = create_light_filter_base(svg, "whitesmoke");
            //svg = create_light_filter(svg, "linen");
            svg = create_gradient_filter(svg, mapColour);
            svg = create_gradient_filter_boundary(svg, baseColour);
            svg = create_circle_fill(svg, mapColour, baseColour);
            svg = create_circle_fill_spiral(svg, mapColour, baseColour);
            svg = create_label_fill(svg, baseColour);

            // set display backgrounds
            //document.getElementById("yearDisplay").style.background = 'radial-gradient(' + baseColour + ' 30%, black)';
            //document.getElementById("yearDisplay").style.webkitTextStroke  = "3px " + "whitesmoke";
            //document.getElementById("yearDisplay").style.textShadow  = "2px 2px 5px " + baseColour;
            //document.getElementById("regionDisplay").style.background = 'radial-gradient(' + baseColour + ' 30%, black)';
            document.getElementById("regionDisplay").style.webkitTextStroke  = "1px " + "whitesmoke";
            //document.getElementById("regionDisplay").style.textShadow  = "2px 2px 5px " + mapColour;
            document.getElementById("regionDisplay").style.background = 'radial-gradient(' + baseColour + ' 50%, black)';
            //document.getElementById("genreHeader").style.color = baseColour;
            //document.getElementById("genreHeader").style.webkitTextStroke  = "1px " + "whitesmoke";
            document.getElementById("genreHeader").style.textShadow  = "2px 2px 0px " + mapColour;

            var hrs = document.getElementsByClassName('regionHR');
            for(let hr of hrs){
                hr.style.color = "whitesmoke";
                hr.style.opacity = 0.8;
            }

            // scales
            let radScale = d3.scaleSqrt()
            .domain([pop_max, 10*pop_max])
            .range([1*vhu, 3*vhu]).clamp(true);

            let textScale = d3.scaleLinear()
            .domain([100000, 5000000])
            .range([0.7, 0.7]).clamp(true);

            let imageScale = d3.scaleLinear()// using image range at the moment
            .domain([1, 200])// number of nodes
            .range([40, 15]).clamp(true); 

            /*** Filter Display Map and Background Map  ***/ 
            // us counties and places
            if(display_region == "US"){
                if(!(grouped_region)){
                    var display_states = us_counties.features.filter(prop => prop.properties.STATE == us_state_data[region]["fips_code"]);
                    try{ // look up cities
                        var places_points = world_places.features.filter(prop => prop.properties.ADM1NAME == region);
                        places_points = places_points.filter(prop => views[region]["cities"].includes(prop.properties.NAME));
                    }
                    catch{// use pop if not found
                        var places_points = world_places.features.filter(prop => prop.properties.ADM1NAME == region && prop.properties.POP_MAX > pop_max);
                    }
                    var display_boundary = us_states.features.filter(prop => prop.properties.NAME == region);

                    // background map (states)
                    var world_states_background = world_states_back.features.filter(prop => prop.properties.admin != "United States of America" && prop.properties.admin != "Canada" && prop.properties.admin != "Antarctica");
                    if(region == "California"){
                        world_states_background = world_states_background.filter(prop => ["Mexico"].includes(prop.properties.admin));
                    }
                    else{
                        world_states_background = world_states_background.filter(prop => ["Mexico", "Canada", "The Bahamas"].includes(prop.properties.admin));
                    }
                    world_states_background = world_states_background.filter(prop => prop);

                    // background map (boundary)
                    var world_boundaries_background = world_boundaries_back.features.filter(prop => prop.properties.ADMIN != "United States of America"  && prop.properties.ADMIN != "Antarctica");
                    if(region == "California"){
                        world_boundaries_background = world_boundaries_background.filter(prop => ["Mexico"].includes(prop.properties.admin));
                    }
                    else{
                        world_boundaries_background = world_boundaries_background.filter(prop => ["Mexico", "Canada", "The Bahamas"].includes(prop.properties.admin));
                    }
                    world_boundaries_background = world_boundaries_background.filter(prop => prop);
                    

                    // background us
                    var us_counties_background = us_counties.features.filter(prop => prop.properties.STATE != us_state_data[region]["fips_code"]);
                    //us_counties_background = us_counties_background.filter(prop => neighbours[region].includes(get_name_from_fips(prop.properties.STATE)));
                    var us_boundaries_background = us_states.features.filter(prop => prop.properties.NAME != region);
                    //us_boundaries_background = us_boundaries_background.filter(prop => neighbours[region].includes(prop.properties.NAME));
                }

                // by region Northeast etc
                if(grouped_region){
                    var display_states = us_counties.features.filter(prop => in_us_region_fips(prop.properties.STATE));
                    try{
                        var places_points = world_places.features.filter(prop => in_us_region_name(prop.properties.ADM1NAME));
                        places_points = places_points.filter(prop => views[us_region]["cities"].includes(prop.properties.NAME_EN));
                     
                    }  
                    catch{
                        var places_points = world_places.features.filter(prop => in_us_region_name(prop.properties.ADM1NAME) && prop.properties.POP_MAX > pop_max);
                    }
                    
                    var display_boundary = us_states.features.filter(prop => in_us_region_name(prop.properties.NAME));

                    // background map (states)
                    var world_states_background = world_states_back.features.filter(prop => prop.properties.admin != "United States of America"  && prop.properties.admin != "Canada" && prop.properties.admin != "Antarctica");
                    if(us_region == "South"){
                        world_states_background = world_states_background.filter(prop => ["Mexico"].includes(prop.properties.admin));
                    }
                    else{
                        world_states_background = world_states_background.filter(prop => ["Mexico", "Canada", "The Bahamas"].includes(prop.properties.admin));
                    }
                    world_states_background = world_states_background.filter(prop => prop);

                    // background map (boundary)
                    var world_boundaries_background = world_boundaries_back.features.filter(prop => prop.properties.ADMIN != "United States of America"  && prop.properties.ADMIN != "Antarctica");
                    if(us_region == "South"){
                        world_boundaries_background = world_boundaries_background.filter(prop => ["Mexico"].includes(prop.properties.admin));
                    }
                    else{
                        world_boundaries_background = world_boundaries_background.filter(prop => ["Mexico", "Canada", "The Bahamas"].includes(prop.properties.admin));
                    }
                    world_boundaries_background = world_boundaries_background.filter(prop => prop);
                   

                    // background us
                    var us_counties_background = us_counties.features.filter(prop => !(in_us_region_fips(prop.properties.STATE)));
                    //us_counties_background = us_counties_background.filter(prop => neighbours[us_region].includes(get_name_from_fips(prop.properties.STATE)));
                    var us_boundaries_background = us_states.features.filter(prop => !(in_us_region_name(prop.properties.NAME)));
                    //us_boundaries_background = us_boundaries_background.filter(prop => neighbours[us_region].includes(prop.properties.NAME));
                }
            }   
            else{ // world states and places
                if(!(grouped_region)){
                    var display_states = world_states.features.filter(prop => prop.properties.admin == region);
                    try{ // look up cities
                        var places_points = world_places.features.filter(prop => prop.properties.ADM0NAME == region);
                        places_points = places_points.filter(prop => views[region]["cities"].includes(prop.properties.NAME_EN));
                    }
                    catch{ // use pop max if not found
                        var places_points = world_places.features.filter(prop => prop.properties.ADM0NAME == region && prop.properties.POP_MAX > pop_max);
                    }
                    
                    var display_boundary = world_boundaries.features.filter(prop => prop.properties.ADMIN == region);

                    // background map (states)
                    var world_states_background = world_states_back.features.filter(prop => prop.properties.admin != "United States of America" && prop.properties.admin != "Canada" && prop.properties.admin != "Antarctica");
                    //world_states_background = world_states_background.filter(prop => neighbours[region].includes(prop.properties.admin));
                    world_states_background = world_states_background.filter(prop => prop.properties.admin != region);

                    // filter russia oblasks ???
                    var russian_districts = ["Kaliningrad","Pskov","Smolensk","Tver'","Bryansk","Kursk"];

                    // reverse loop to remove items
                    /*
                    let i = world_states_background.length;
                    while (i--) {
                        if(world_states_background[i].properties.admin == "Russia"){
                            if(!(russian_districts.includes(world_states_background[i].properties.name))){
                                world_states_background.splice(i,1);
                            };
                        }

                    }
                    */
                    

                    // background map (boundary)
                    var world_boundaries_background = world_boundaries_back.features.filter(prop => prop.properties.ADMIN != "United States of America" && prop.properties.ADMIN != "Canada" && prop.properties.ADMIN != "Antarctica");
                    //world_boundaries_background = world_boundaries_background.filter(prop => neighbours[region].includes(prop.properties.ADMIN));
                    world_boundaries_background = world_boundaries_background.filter(prop => prop.properties.ADMIN != region);

                    // background us
                    var us_counties_background = us_counties.features.filter(prop => prop); // consistent with above
                    var us_boundaries_background = us_states.features.filter(prop => prop);
                }

                // by world region 
                if(grouped_region){
                    if(world_region == "South America"){ // add france to map for french guiana
                        var display_states = world_states.features.filter(prop => in_world_region(prop.properties.admin) || prop.properties.admin == "France");
                    }
                    else{
                        var display_states = world_states.features.filter(prop => in_world_region(prop.properties.admin));
                    }
                    
                    try{
                        var places_points = world_places.features.filter(prop => in_world_region(prop.properties.ADM0NAME));
                        places_points = places_points.filter(prop => views[world_region]["cities"].includes(prop.properties.NAME_EN));
                     
                    }  
                    catch(e){
                        var places_points = world_places.features.filter(prop => in_world_region(prop.properties.ADM0NAME) && prop.properties.POP_MAX > pop_max);
                    }

                    if(world_region == "South America"){ // add france to map for french guiana
                        var display_boundary = world_boundaries.features.filter(prop => in_world_region(prop.properties.ADMIN) || prop.properties.ADMIN == "France");
                    }
                    else{
                        var display_boundary = world_boundaries.features.filter(prop => in_world_region(prop.properties.ADMIN));
                    }
                    

                    // background map (states)
                    var world_states_background = world_states_back.features.filter(prop => prop.properties.admin != "United States of America" && prop.properties.admin != "Canada" && prop.properties.admin != "Antarctica");
                    //world_states_background = world_states_background.filter(prop => neighbours[world_region].includes(prop.properties.admin));
                    world_states_background = world_states_background.filter(prop => !(in_world_region(prop.properties.admin)));

                    // filter russia oblasks ???
                    //var russian_districts = ["Astrakhan'","Sevastopol", "Crimea", "Rostov", "Adygey","Krasnodar", "Stavropol'", "Kabardin-Balkar", "Karachay-Cherkess","Dagestan","Chechnya","Kalmyk", "Ingush", "North Ossetia"];
                    var russian_districts = ["Moskovsskaya","Orel","Tula","Kaluga", "City of St. Petersburg", "Vologda", "Leningrad","Novgorod", "Kaliningrad","Pskov","Smolensk","Tver'","Bryansk","Kursk"];

                    // reverse loop to remove item
                    /*
                    let i = world_states_background.length;
                    while (i--) {
                        if(world_states_background[i].properties.admin == "Russia"){
                            if(!(russian_districts.includes(world_states_background[i].properties.name))){
                                world_states_background.splice(i,1);
                            };
                        }

                    }
                    */
                    
                

                    // background map (boundary)
                    var world_boundaries_background = world_boundaries_back.features.filter(prop => prop.properties.ADMIN != "United States of America" && prop.properties.ADMIN != "Canada" && prop.properties.ADMIN != "Antarctica");
                    //world_boundaries_background = world_boundaries_background.filter(prop => neighbours[world_region].includes(prop.properties.ADMIN));
                    world_boundaries_background = world_boundaries_background.filter(prop => !(in_world_region(prop.properties.ADMIN)));

                    // background us
                    var us_counties_background = us_counties.features.filter(prop => prop); // consistent with above
                    var us_boundaries_background = us_states.features.filter(prop => prop);
                }
            }

            // ** BANCKGROUND

            // filter out null geometries from mapshaper simplification
            world_states_background = world_states_background.filter(feature => feature.geometry !== null);
            var world_states_fixed = world_states_background.map(function(f) {
                    return turf.rewind(f,{reverse:true});
            });

            // filter out null geometries from mapshaper simplification
            world_boundaries_background = world_boundaries_background.filter(feature => feature.geometry !== null);
            // turf unwind features for plot
            var world_boundaries_fixed = world_boundaries_background.map(function(f) {
                    return turf.rewind(f,{reverse:true});
            });
            

            // turf unwind features for plot and filter out null geoms
            us_counties_background = us_counties_background.filter(feature => feature.geometry !== null);
            var us_counties_fixed = us_counties_background.map(function(f) {
                    return turf.rewind(f,{reverse:true});
            });

            // turf unwind features for plot and filter out null geoms
            us_boundaries_background = us_boundaries_background.filter(feature => feature.geometry !== null);
            var us_boundaries_fixed = us_boundaries_background.map(function(f) {
                    return turf.rewind(f,{reverse:true});
            });

            // ** DISPLAY

            // using different german states to match counties
            if(region == "Germany" && display_region == "World" && !(grouped_region)){
                if(!(grouped_region)){
                    display_states = german_divisions.features;
                }
            }

            // turf unwind features for plot and filter out null geoms
            display_states = display_states.filter(feature => feature.geometry !== null);
            var fixed_states = display_states.map(function(f) {
                    return turf.rewind(f,{reverse:true});
            });

            // using different german divisions
            if(region == "Germany" && display_region == "World"){
                if(!(grouped_region)){
                    display_boundary = german_states.features;
                }
            }

            // turf unwind features for plot (boundary)
            display_boundary = display_boundary.filter(feature => feature.geometry !== null);
            var fixed_boundary_states = display_boundary.map(function(f) {
                    return turf.rewind(f,{reverse:true});
            });

            
            // turf unwind features for plot and filter out null geoms
            canada_divisions = canada_divisions.features.filter(feature => feature.geometry !== null);
            var fixed_divisions_canada = canada_divisions.map(function(f) {
                    return turf.rewind(f,{reverse:true});
            });

            // turf unwind features for plot and filter out null geoms
            uk_divisions = uk_divisions.features.filter(feature => feature.geometry !== null);
            var fixed_divisions_uk = uk_divisions.map(function(f) {
                    return turf.rewind(f,{reverse:true});
            });

            // turf unwind features for plot and filter out null geoms
            aus_divisions = aus_divisions.features.filter(feature => feature.geometry !== null);
            var fixed_divisions_aus = aus_divisions.map(function(f) {
                    return turf.rewind(f,{reverse:true});
            });

           
            // get and set current projection
            if(display_region == "World"){
                if(grouped_region){
                    current_projection = projections.getProjection(world_region ,width, height, fixed_states);
                }
                else{
                    current_projection = projections.getProjection(region ,width, height, fixed_states, margin);
                }
            }
            else{ // US
                if(grouped_region){
                    current_projection = projections.getProjection(us_region ,width, height, fixed_states);
                }
                else{
                    current_projection = projections.getProjection(region ,width, height, fixed_states, margin);
                }
            }
            
            // path and graph
            const path = d3.geoPath().projection(current_projection);
            create_graph_all_genres(); //create initial graph (needed for image nodes)

            // ** CUSTOM MARKERS

            // remove jacksonsville north carlonia and duplicate kansas city,denpasar
            let test_points = [];
            let kans_bool = false;
            let denp_bool = false;
            console.log(places_points);
            for(let place of places_points){
                if(!(place['properties']['ADM1NAME'] == 'North Carolina' && place['properties']['NAME'] == "Jacksonville")){
                    if(place['properties']['NAME'] == "Kansas City"){
                        if(!(kans_bool)){
                            test_points.push(place);
                            kans_bool = true;
                        }
                    }
                    else if(place['properties']['NAME_EN'] == "Denpasar"){
                        if(!(denp_bool)){
                            test_points.push(place);
                            denp_bool = true;
                        }
                    }
                    else{
                        test_points.push(place);
                    }
                    
                }
                console.log(place['properties']['NAME'])
            }
            places_points = test_points;

            // add custome points (not in json)
            if(display_bands["thrash"]){
                if(region == "Germany"){
                    var new_point = {"geometry":{"coordinates":[7.62082, 47.59331]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Weil am Rhein", "POP_MAX": 100000000}}
                    places_points.push(new_point);
                    var new_point = {"geometry":{"coordinates":[10.22175, 50.04937]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Schweinfurt", "POP_MAX": 100000000}}
                    places_points.push(new_point);
                    var new_point = {"geometry":{"coordinates":[8.016667, 50.883331]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Siegen", "POP_MAX": 100000000}}
                    places_points.push(new_point);
                    var new_point = {"geometry":{"coordinates":[12.10161 , 49.01513]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Regensburg", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                }

                if(region == "Spain"){
                    var new_point = {"geometry":{"coordinates":[-2.16992, 43.28444]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Zarautz", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[-4.77915170, 37.88472670]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Córdoba", "POP_MAX": 100000000}}
                    places_points.push(new_point);
                    
                }

                if(region == "Italy"){

                    //var new_point = {"geometry":{"coordinates":[12.568333, 44.0594448]}, // any pop max its scaled
                            //"properties":{"NAME_EN": "Rimini", "POP_MAX": 100000000}}
                    //places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[13.45293,43.29789]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Macerata", "POP_MAX": 100000000}}
                    //places_points.push(new_point); // removed shorts

                    var new_point = {"geometry":{"coordinates":[13.583333,37.316666]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Agrigento", "POP_MAX": 100000000}}
                    //places_points.push(new_point); // removed shorts

                }

                if(region == "Switzerland"){
                    var new_point = {"geometry":{"coordinates":[8.84393, 47.29426]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Hinwil", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[9.1, 47.56667]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Weinfelden", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[8.94534, 46.01562]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Massagno", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[ 7.200, 46.967]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Kerzers", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    
                }

                if(region == "Greece"){
                    var new_point = {"geometry":{"coordinates":[22.944860, 37.940880]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Corinth", "POP_MAX": 100000000}}
                    places_points.push(new_point);
                    
                }

                if(region == "Sweden"){
                    var new_point = {"geometry":{"coordinates":[12.49118, 56.90552]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Falkenberg", "POP_MAX": 100000000}}
                    places_points.push(new_point);
                    
                }

                if(region == "Netherlands"){
                    var new_point = {"geometry":{"coordinates":[5.6589, 53.03297]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Sneek", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[6.7194, 51.9725 ]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Winterswijk", "POP_MAX": 100000000}}
                    //places_points.push(new_point);// removed shorts

                    var new_point = {"geometry":{"coordinates":[6.89583, 52.21833 ]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Enschede", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[5.4441391, 51.6017723 ]}, // any pop max its scaled
                            "properties":{"NAME_EN": "North Brabant", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[5.98154, 50.88365 ]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Heerlen", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[5.0913, 51.55551 ]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Tilburg", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[6.4625, 52.363611111111 ]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Nijverdal", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[6.47639, 52.7225 ]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Hoogeveen", "POP_MAX": 100000000}}
                    places_points.push(new_point);


                    
                }

                if(region == "Japan"){
            
                    var new_point = {"geometry":{"coordinates":[131.47139, 34.18583]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Yamaguchi", "POP_MAX": 100000000}}
                    places_points.push(new_point);
                    
                }
            }

            // add custome points (not in json)
            if(display_bands["black"]){
                if(region == "Germany"){
                    var new_point = {"geometry":{"coordinates":[12.641392, 50.59465]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Schneeberg", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[10.18527, 47.98372]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Memmingen", "POP_MAX": 100000000}}
                    //places_points.push(new_point); // removed 4 shorts

                    var new_point = {"geometry":{"coordinates":[11.392927956697605, 48.949926990226636]}, // any pop max its scaled
                            "properties":{"NAME_EN": 'Kipfenberg', "POP_MAX": 100000000}}
                    places_points.push(new_point);// 48.949926990226636, 11.392927956697605

                    var new_point = {"geometry":{"coordinates":[6.0841512514845, 50.7763617196404]}, // any pop max its scaled
                            "properties":{"NAME_EN": 'Aachen', "POP_MAX": 100000000}}
                    places_points.push(new_point);// 50.7763617196404, 6.0841512514845

                    var new_point = {"geometry":{"coordinates":[10.22175, 50.04937]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Schweinfurt", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                }

                if(region == "Italy"){
                    var new_point = {"geometry":{"coordinates":[15.805604, 40.640408]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Potenza", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[12.568333, 44.0594448]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Rimini", "POP_MAX": 100000000}}
                    //places_points.push(new_point);// removed shorts

                }

                if(region == "Hungary"){
                    var new_point = {"geometry":{"coordinates":[21.20444226702809, 48.159066469060676]}, // any pop max its scaled
                            "properties":{"NAME_EN": 'Szerencs', "POP_MAX": 100000000}}
                    places_points.push(new_point);// 48.159066469060676, 21.20444226702809

                    var new_point = {"geometry":{"coordinates":[17.800604789362115, 46.04883837149812]}, // any pop max its scaled
                            "properties":{"NAME_EN": 'Szigetvár', "POP_MAX": 100000000}}
                    places_points.push(new_point);// 46.04883837149812, 17.800604789362115

                    var new_point = {"geometry":{"coordinates":[17.365300998804337, 46.226055403380336]}, // any pop max its scaled
                            "properties":{"NAME_EN": 'Nagyatád', "POP_MAX": 100000000}}
                    places_points.push(new_point);// 46.226055403380336, 17.365300998804337

                    var new_point = {"geometry":{"coordinates":[16.99104, 46.45347]}, // any pop max its scaled
                            "properties":{"NAME_EN": 'Nagykanizsa', "POP_MAX": 100000000}}
                    places_points.push(new_point);// 46.226055403380336, 17.365300998804337
                }

                if(region == "Colombia"){
                    var new_point = {"geometry":{"coordinates":[-76.5224, 3.45686]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Cali", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[-77.2726, 1.21369]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Pasto", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[-75.51444, 10.39972]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Cartagena", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                }

                if(region == "Australia"){
                    var new_point = {"geometry":{"coordinates":[147.2869493, -31.8759835]}, // any pop max its scaled
                            "properties":{"NAME_EN": "New South Wales", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                }

                if(region == "Malaysia"){
                    var new_point = {"geometry":{"coordinates":[102.5994547,  3.6168822]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Pahang", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                }

                if(region == "United Kingdom"){
                    var new_point = {"geometry":{"coordinates":[-1.466667, 52.916668]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Derby", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[-1.277868813503241, 52.53565916566502]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Sapcote", "POP_MAX": 100000000}}
                    places_points.push(new_point); // 52.53565916566502, -1.277868813503241

                    var new_point = {"geometry":{"coordinates":[-2.0769839172400526, 51.899789171458494]}, // any pop max its scaled
                            "properties":{"NAME_EN": 'Cheltenham', "POP_MAX": 100000000}}
                    places_points.push(new_point); // 51.899789171458494, -2.0769839172400526

                }

                if(region == "France"){ // 43.94844784183787, 4.801667696564574
                    var new_point = {"geometry":{"coordinates":[4.801667696564574, 43.94844784183787]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Avignon", "POP_MAX": 100000000}}
                    places_points.push(new_point); // 48.27712676623403, -2.899193307406238

                    var new_point = {"geometry":{"coordinates":[-2.899193307406238, 48.27712676623403]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Merléac", "POP_MAX": 100000000}}
                    places_points.push(new_point); // 49.35653378461303, 6.200709899332349

                    var new_point = {"geometry":{"coordinates":[6.200709899332349, 49.35653378461303]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Yutz", "POP_MAX": 100000000}}
                    places_points.push(new_point); // 49.35653378461303, 6.200709899332349

                }
                if(us_region == "Northwest"&& grouped_region){
                    var new_point = {"geometry":{"coordinates":[-106.9553 , 44.7913]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Sheridan", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                } //'latitude': 61.329791, 'longitude': 6.72036476

                if(us_region == "Southwest" && grouped_region){ 
                    var new_point = {"geometry":{"coordinates":[-118.972076, 37.648544]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Mammoth Lakes", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[-118.755997, 36.7014631]}, // any pop max its scaled
                            "properties":{"NAME_EN": "California", "POP_MAX": 100000000}}
                    places_points.push(new_point);


                }

                if(us_region == "Northeast" && display_region == "US" && grouped_region){ 
                    var new_point = {"geometry":{"coordinates":[-74.20616167301641, 39.960313260273445]}, // any pop max its scaled
                            "properties":{"NAME_EN": "New Jersey", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[-77.7278831, 40.9699889]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Pennsylvania", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                }

                if(us_region == "Great Lakes" && display_region == "US" && grouped_region){
                    var new_point = {"geometry":{"coordinates":[-88.757355 , 41.930370]}, // any pop max its scaled
                            "properties":{"NAME_EN": "DeKalb", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[-89.4337288 , 40.0796606]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Illinois", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                } //'latitude': 61.329791, 'longitude': 6.72036476

                if(world_region == "North Asia"){
                    var new_point = {"geometry":{"coordinates":[114.177216 , 22.302711]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Hong Kong", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[135.484802 , 34.672314]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Osaka", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                }

                if(region == "Poland"){ // 50.81007234316473, 19.116577576411775 54.4633673805736, 17.029505761553008
                    
                    var new_point = {"geometry":{"coordinates":[18.599138416553455, 53.014127643296106]}, // any pop max its scaled
                            "properties":{"NAME_EN": 'Toruń', "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[17.810643859553394, 51.27565340173556]}, // any pop max its scaled
                            "properties":{"NAME_EN": 'Perzów', "POP_MAX": 100000000}}
                    //places_points.push(new_point); // removed shorts

                    var new_point = {"geometry":{"coordinates":[21.4239,  50.28709]}, // any pop max its scaled
                            "properties":{"NAME_EN": 'Mielec', "POP_MAX": 100000000}}
                    places_points.push(new_point); // 51.27565340173556, 17.810643859553394

                    var new_point = {"geometry":{"coordinates":[21.682752385276896,  49.554733206553195]}, // any pop max its scaled
                            "properties":{"NAME_EN": 'Dukla', "POP_MAX": 100000000}}
                    places_points.push(new_point); // 49.554733206553195, 21.682752385276896

                }

                if(region == "Norway"){
                    var new_point = {"geometry":{"coordinates":[6.72036476 , 61.329791]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Sogndal", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    // 'latitude': 59.7985899, 'longitude': 6.294994955666921 59.284073, 11.109403
                    var new_point = {"geometry":{"coordinates":[6.294994955666921 , 59.7985899]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Etne", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[11.109403 , 59.284073]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Sarpsborg", "POP_MAX": 100000000}}
                    places_points.push(new_point);
                }

                if(region == "Sweden"){ // 61.000890767124574, 14.516857230494425
                    var new_point = {"geometry":{"coordinates":[14.516857230494425, 61.000890767124574]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Dalarna", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                } //'latitude': 61.329791, 'longitude': 6.72036476
            }

            // add custome points (not in json)
            if(display_bands["death"]){
                if(region == "Florida"){ 
                    var new_point = {"geometry":{"coordinates":[-81.5311887228028, 27.75285782385015]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Florida", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                }

                if(region == "Argentina"){ 
                    var new_point = {"geometry":{"coordinates":[-67.70946, -53.78769]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Rio Grande", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                }

                if(region == "Denmark"){ 
                    var new_point = {"geometry":{"coordinates":[9.473052, 55.495972]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Kolding", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[11.76092, 55.22992]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Næstved", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[8.76966, 55.33051]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Ribe", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[11.788920, 55.444901]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Ringsted", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[11.35459, 55.40276]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Slagelse", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                }

                if(us_region == "Southwest" && grouped_region){ 
                    var new_point = {"geometry":{"coordinates":[-118.972076, 37.648544]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Mammoth Lakes", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                }

                if(world_region == "Middle East" && grouped_region){ 
                    var new_point = {"geometry":{"coordinates":[27.142826, 38.423733]}, // any pop max its scaled
                            "properties":{"NAME_EN": "İzmir", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                }

                if(world_region == "South Asia" && grouped_region){ 
                    var new_point = {"geometry":{"coordinates":[73.53966432958072, 4.437813800000001]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Maldives", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                }

                if(world_region == "The Baltic States" && grouped_region){ 
                    var new_point = {"geometry":{"coordinates":[25.266872, 57.308613]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Cēsis", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                }

                if(world_region == "Africa" && grouped_region){ 
                    var new_point = {"geometry":{"coordinates":[57.490768, -20.294079]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Mauritius", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                }

                if(world_region == "South America" && grouped_region){ 
                    var new_point = {"geometry":{"coordinates":[-38.500550230792875, -12.981348686288886]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Salvador", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                }

                if(region == "Sweden"){ // -12.981348686288886, -38.500550230792875
                    var new_point = {"geometry":{"coordinates":[16.775855050244058, 60.6209921490573]}, // any pop max its scaled
                            "properties":{"NAME_EN": 'Sandviken', "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[14.639100682525374, 63.17711663751495]}, // any pop max its scaled
                            "properties":{"NAME_EN": 'Östersund', "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[15.195897968376999, 60.14883133383981]}, // any pop max its scaled
                            "properties":{"NAME_EN": 'Ludvika', "POP_MAX": 100000000}}
                    places_points.push(new_point);

                }
                    // 39.960313260273445, -74.20616167301641
                if(us_region == "Northeast" && display_region == "US" && grouped_region){ 
                    var new_point = {"geometry":{"coordinates":[-74.20616167301641, 39.960313260273445]}, // any pop max its scaled
                            "properties":{"NAME_EN": "New Jersey", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                }

                if(region == "Poland"){ // 50.81007234316473, 19.116577576411775 54.4633673805736, 17.029505761553008
                    var new_point = {"geometry":{"coordinates":[19.116577576411775, 50.81007234316473]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Częstochowa", "POP_MAX": 100000000}}
                    //places_points.push(new_point); // removed shorts

                    var new_point = {"geometry":{"coordinates":[17.029505761553008, 54.4633673805736]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Słupsk", "POP_MAX": 100000000}}
                    places_points.push(new_point);

                    var new_point = {"geometry":{"coordinates":[20.98651561367258, 50.01133453601809]}, // any pop max its scaled
                            "properties":{"NAME_EN": "Tarnów", "POP_MAX": 100000000}}
                    places_points.push(new_point); // 53.014127643296106, 18.599138416553455

                    var new_point = {"geometry":{"coordinates":[18.599138416553455, 53.014127643296106]}, // any pop max its scaled
                            "properties":{"NAME_EN": 'Toruń', "POP_MAX": 100000000}}
                    places_points.push(new_point);

                }
            }

            // add radii to points
            for(let place of places_points){
                if(place['properties']['NAME_EN'] in radii){
                    place['radius'] = radii[place['properties']['NAME_EN']];
                }
                else{
                    place['radius'] = 20;
                }

                // change Donetstk as it is a dual city
                if(place['properties']['NAME_EN'] == "Donetsk"){
                   place['properties']['NAME_EN'] = "Donetsk and Makiivka";
                }

            }

            // don't use clippath, makes it slower!!

            // * WORLD BACKGROUND

            // background world fill states
            svg
            .append("g")
            .selectAll("world")
            .data(world_states_fixed)
            .join("path")
            .attr("d", path)
            .attr("fill", "url(#circleGradFill)")
            .attr("fill-opacity", function(d){
                if(display_genre == "thrash"){return 0.1;}
                return 0.15;
            }) // 0.15
            .attr("stroke",mapColour) 
            .attr("class", "world")
            .attr("stroke-width", function(d){
                return  0.5; // 0.5
            }) 
            .attr("stroke-opacity", function(d){
                    return 0.8; // 0.8
            });

            // background world stroke countries
            // no country stroke
            /*
            svg
            .append("g")
            .selectAll("world_boundaries")
            .data(world_boundaries_fixed)
            .join("path")
            .attr("d", path)
            .attr("fill", "none")
            .attr("stroke","black") 
            .attr("class", "world")
            .attr("stroke-width", function(d){
                return  1;
            }) 
            .attr("stroke-opacity", function(d){
                    return 1;
            });
            */
            

            // backgroundfill us counties
            if(region == "Canada" || region == "Mexico" || display_region == "US"){
                
                svg
                .append("g")
                .selectAll("counties")
                .data(us_counties_fixed)
                .join("path")
                .attr("d", path)
                .attr("fill", "url(#circleGradFill)")
                .attr("fill-opacity", function(d){
                    if(display_genre == "thrash"){return 0.1;}
                    return 0.15;
                })
                .attr("stroke",mapColour) 
                .attr("class", "world")
                .attr("stroke-width", function(d){
                    return  0.5;
                }) 
                .attr("stroke-opacity", function(d){
                        return 0.8;
                });
                

                // background us states stroke (remove when not needed)
                
                svg
                .append("g")
                .selectAll("stateboundaries")
                .data(us_boundaries_fixed)
                .join("path")
                .attr("d", path)
                .attr("fill", "none")
                .attr("stroke","black") 
                .attr("class", "world")
                .attr("stroke-width", function(d){
                    return  1;
                }) 
                .attr("stroke-opacity", function(d){
                    if(region == "Florida" && !(grouped_region) && display_region=="US"){return 0;}
                    if(region == "Canada"){return 0;}
                    return 1;
                        
                });
                
                
            }

            // background canada (only seen from us)
            if(display_region == "US" && region != "California" && region != "Florida" && us_region != "Southwest" && us_region != "South"){
                svg
                .append("g")
                .selectAll("backdivisions")
                .data(fixed_divisions_canada)
                .join("path")
                .attr("d", path)
                .attr("fill","url(#circleGradFill)")
                .attr("fill-opacity", function(d){
                    if(display_genre == "thrash"){return 0.1;}
                    return 0.15;
                })
                .attr("stroke", mapColour)
                .attr("stroke-width", 0.5)
                .attr("stroke-opacity", 0.8)
                .attr("class", "statearea");
            }

            // CANADA
            if(region == "Canada" && display_region == "World" && !(grouped_region)){
                // counties or states
                svg
                .append("g")
                .selectAll("canadapath")
                .data(fixed_divisions_canada)
                .join("path")
                .attr("d", path)
                .attr("fill",function(d){ 
                    return  "url(#circleGradFill)"; //"url(#circleGradFill)";
                }) 
                .attr("fill-opacity",0.7)
                .attr("stroke", function(d){
                    return mapColour;
                })
                .attr("stroke-width", function(d){
                    return  0.5;
                }) 
                .attr("stroke-opacity", function(d){
                    return 0.5;
                })
                .attr("class", "statearea");

            }

            // AUSTRALIA
            if(region == "Australia" && display_region == "World" && !(grouped_region)){
                // counties or states
                svg
                .append("g")
                .selectAll("canadapath")
                .data(fixed_divisions_aus)
                .join("path")
                .attr("d", path)
                .attr("fill",function(d){ 
                    return  "url(#circleGradFill)"; //"url(#circleGradFill)";
                }) 
                .attr("fill-opacity",0.7)
                .attr("stroke", function(d){
                    return "var(--bs-dark)";
                })
                .attr("stroke-width", function(d){
                    return  0.5;
                }) 
                .attr("stroke-opacity", function(d){
                    return 0.5;
                })
                .attr("class", "statearea");

            }
            
            // REST states or divisions
            svg
            .append("g")
            .selectAll("path")
            .data(fixed_states)
            .join("path")
            .attr("d", path)
            .attr("fill",function(d){ // handle canada diff. (germany ok has has own states stroke)
                if((region == "Canada" || region == "Australia") && display_region == "World" && !(grouped_region)){return 'none';}
                return  "url(#circleGradFill)"; //"url(#circleGradFill)";
            }) 
            .attr("fill-opacity",0.7)// 0.7
            .attr("stroke", function(d){
                if((region == "Canada" || region == "Australia") && display_region == "World" && !(grouped_region)){return "var(--bs-dark)";}
                if(region == "Poland"){return "var(--bs-dark)";}
                return mapColour;
            })
            .attr("stroke-width", function(d){
                if((region == "Canada" || region == "Australia") && display_region == "World" && !(grouped_region)){return 1;}
                return  0.5;
            }) 
            .attr("stroke-opacity", function(d){
                if((region == "Canada" || region == "Australia") && display_region == "World" && !(grouped_region)){return 0.5;}
                return 0.5; 
            })
            .attr("class", "statearea");

            // boundaries b/w countries
            if(grouped_region || region == "Germany"){
                svg
                .append("g")
                .selectAll("boundary")
                .data(fixed_boundary_states)
                .join("path")
                .attr("d", path)
                .attr("fill", 'none')
                .attr("stroke", "var(--bs-dark)") 
                .attr("class", "boundary")
                .attr("stroke-width", function(d){
                    return  1;
                }) 
                .attr("stroke-opacity", function(d){
                    return 0.5;
                });
            }
            
            // UNITED KINGDOM 
            if(region == "United Kingdom" && display_region == "World" && !(grouped_region)){
                
                // counties or states
                svg
                .append("g")
                .selectAll("ukpath")
                .data(fixed_divisions_uk)
                .join("path")
                .attr("d", path)
                .attr("fill", 'none') 
                .attr("stroke", function(d){
                    return "var(--bs-dark)";
                })
                .attr("stroke-width", function(d){
                    return  1;
                }) 
                .attr("stroke-opacity", function(d){
                    return 0.5;
                })
                .attr("class", "statearea");

            }

            // circle city markers
            svg
            .selectAll("markers")
            .data(places_points)
            .enter()
            .append('circle')
            .attr('cx', d => current_projection(d.geometry.coordinates)[0])
            .attr('cy', d => current_projection(d.geometry.coordinates)[1])
            .attr('r', d => d['radius']) 
            .attr("fill", "black")
            .attr("fill-opacity", 0.5)
            .attr("stroke", "url(#middleCircleFill)") //url(#middleCircleFill)
            .attr("stroke-width", 1)
            .attr("stroke-opacity", 0.5)
            .attr("class", "views");

            // multi-viewers markers
            if(map_region in multi_views){
                
                // add multi view marker
                for(let view of multi_views[map_region]){
                    
                    svg
                    .selectAll("multimarkers")
                    .data([view])
                    .enter()
                    .append('circle')
                    .attr('cx', d => current_projection(d.loc)[0])
                    .attr('cy', d => current_projection(d.loc)[1])
                    .attr('r', d => d['radius']) 
                    .attr("fill", "black")
                    .attr("fill-opacity", 0.5)
                    .attr("stroke", "url(#middleCircleFill)") //url(#middleCircleFill)
                    .attr("stroke-width", 1)
                    .attr("stroke-opacity", 0.5)
                    .attr("class", "views");

                    // add data now to places for text boxes...HERE handle radius for text
                    for(let tag of view.tags){
                        var new_point = {"geometry":{"coordinates":view.loc}, 'radius':view['radius'],// any pop max its scaled
                            "properties":{"NAME_EN": tag, "POP_MAX": 100000000}}
                        places_points.push(new_point);

                    }

                }

            }
        
            
            // add links (here so behind other elements)
            var link = svg.append("g")
            .attr("class", "links")
            .selectAll("edges");

            // add base nodes (circle specular) here so behind 
            var base_node = svg.append("g")
            .attr("class", "nodes")
            .selectAll("bands");

            /*** place names **/
            var place_radius = 20;
            var deltaX = 35;

            // add first for bounding box
            svg
            .selectAll("text")
            .data(places_points)
            .enter()
            .append("text")
            .style('font-size', d => textScale(d.properties.POP_MAX)+"rem")
            .style('font-weight', 700)
            .attr("letter-spacing", "2px")
            .text(d => d.properties.NAME_EN)
            .call(getBB);

            // remove the text elements (watch for other text elements)
            d3.selectAll("text").remove();

            const xMargin = 2;
            const yMargin = 2;
            
            // add background rects
            svg
            .selectAll("textareas")
            .data(places_points)
            .enter()
            .append("rect")
            .attr("class", "maprect")
            .attr("x", function(d){ //
                if(d.properties.NAME_EN == 'Vancouver'){ // shorts 
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width/2 + 30;
                }
                if(d.properties.NAME_EN == 'Victoria'){ // shorts 
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width/2 + 30;
                }
                if(d.properties.NAME_EN == 'San Jose'){ // adjust 
                    return current_projection(d.geometry.coordinates)[0];
                }
                if(d.properties.NAME_EN == 'SA Brasília'){ // adjust 
                    return current_projection(d.geometry.coordinates)[0] - 3*d.bbox.width/4;
                }
                if(d.properties.NAME_EN == 'Ponta Delgada'){ // adjust 
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width/2 + 40;
                }
                if(d.properties.NAME_EN == 'Jakata'){ // adjust 
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width/2 - 7;
                }
                if(d.properties.NAME_EN == 'Boston'){ // adjust 
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width/2 + 10;
                }
                if(d.properties.NAME_EN == 'Providence'){ // adjust 
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width/2 - 0;
                }
                if(d.properties.NAME_EN == 'THRASH São Paulo'){ // adjust 
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width/2 - 15;
                }
                if(d.properties.NAME_EN == 'Santos'){ // adjust 
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width/2 + 15;
                }
                if(d.properties.NAME_EN == 'Ho Chi Minh City'){ // adjust 
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width/2 + 16;
                }
                if(d.properties.NAME_EN == 'LONG Kuala Lumpur'){ // adjust 
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width/2 - 12;
                }
                if(d.properties.NAME_EN == 'Singapore'){ // adjust 
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width/2 + 15;
                }
                if(d.properties.NAME_EN == 'Basel'){ // adjust 
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width/2 - 7;
                }
                if(d.properties.NAME_EN == 'Liestal'){ // adjust 
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width/2 + 12;
                }
                if(d.properties.NAME_EN == 'The Hague'){ // adjust 
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width/2 - 5;
                }
                if(d.properties.NAME_EN == 'Rotterdam'){ // adjust 
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width/2 + 14;
                }
                if(d.properties.NAME_EN == 'Dhaka'){ // adjust 
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width/2 - 30;
                }
                if(d.properties.NAME_EN == 'Bandung'){ // adjust 
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width/2 + 9;
                }
                if(d.properties.NAME_EN == 'Buenos Aires'){ // adjust 
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width/2 + 15;
                }
                if(d.properties.NAME_EN == 'Essen'){ // adjust 
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width;
                }
                if(d.properties.NAME_EN == 'Providence'){ // adjust 
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width/2 + 0;
                }
                if(d.properties.NAME_EN == 'Düsseldorf'){ // adjust 
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width;
                }
                if(!(d.properties.NAME_EN in anchors)){ // middle default
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width/2;
                }
                if(anchors[d.properties.NAME_EN] == "start"){
                    return current_projection(d.geometry.coordinates)[0] + d['radius'];// + xMargin/2;
                };
                if(anchors[d.properties.NAME_EN] == "top"){
                    return current_projection(d.geometry.coordinates)[0] - d.bbox.width/2;
                };
                return current_projection(d.geometry.coordinates)[0]  - d['radius'] - (d.bbox.width) - xMargin/2;
            })
            .attr("y", function(d){
                if(d.properties.NAME_EN == 'SA Belo Horizonte'){ // adjust 
                    return current_projection(d.geometry.coordinates)[1] + 17;
                }
                if(d.properties.NAME_EN == 'Ottawa'){ // adjust 
                    return current_projection(d.geometry.coordinates)[1] - 10;
                }
                if(d.properties.NAME_EN == 'Pune'){ // adjust 
                    return current_projection(d.geometry.coordinates)[1] + 12;
                }
                if(d.properties.NAME_EN == 'Dhaka'){ // adjust 
                    return current_projection(d.geometry.coordinates)[1] - d['radius'] - yMargin + 5;
                }
                if(d.properties.NAME_EN == 'Bloemfontein'){ // adjust 
                    return current_projection(d.geometry.coordinates)[1] + 12;
                }
                if(d.properties.NAME_EN == 'Durban'){ // adjust 
                    return current_projection(d.geometry.coordinates)[1] + 15;
                }
                if(d.properties.NAME_EN == 'Chittagong'){ // adjust 
                    return current_projection(d.geometry.coordinates)[1] + 12;
                }
                if(d.properties.NAME_EN == 'Long Island'){ // adjust 
                    return current_projection(d.geometry.coordinates)[1] + 12;
                }
                if(d.properties.NAME_EN == 'Cheltenham'){ // adjust 
                    return current_projection(d.geometry.coordinates)[1] - 5;
                }
                if(d.properties.NAME_EN == 'DEATH Bristol'){ // adjust 
                    return current_projection(d.geometry.coordinates)[1] + 5;
                }
                if(d.properties.NAME_EN == 'Santiago'){ // adjust 
                    return current_projection(d.geometry.coordinates)[1] + 5;
                }
                if(d.properties.NAME_EN == 'Gothenburg'){ // adjust 
                    return current_projection(d.geometry.coordinates)[1] + 10;
                }
                if(d.properties.NAME_EN == 'Borås'){ // adjust 
                    return current_projection(d.geometry.coordinates)[1] + 10;
                }
                if(d.properties.NAME_EN == 'Beirut'){ // adjust 
                    return current_projection(d.geometry.coordinates)[1] - 10;
                }
                if(d.properties.NAME_EN == 'Montreal'){ // adjust 
                    return current_projection(d.geometry.coordinates)[1] + 10;
                }
                if(d.properties.NAME_EN == 'Wollongong'){ // adjust 
                    return current_projection(d.geometry.coordinates)[1] + 10;
                }
                if(d.properties.NAME_EN == 'SA Rio de Janeiro'){ // adjust 
                    return current_projection(d.geometry.coordinates)[1] - 10;
                }
                if(!(d.properties.NAME_EN in anchors)){ // middle default
                    return current_projection(d.geometry.coordinates)[1] + d['radius'] + d.bbox.height/2 + yMargin;
                }
                if(anchors[d.properties.NAME_EN] == "start"){
                    return current_projection(d.geometry.coordinates)[1];
                };
                if(anchors[d.properties.NAME_EN] == "top"){
                    return current_projection(d.geometry.coordinates)[1] - d['radius'] - yMargin;
                };
                //if(d.properties.NAME_EN == 'São Paulo'){ // adjust for south america  view 
                    //return current_projection(d.geometry.coordinates)[1] - 10;
                //}
                return current_projection(d.geometry.coordinates)[1];
            })
            .attr("width", d => d.bbox.width + 2 * xMargin)
            .attr("height", d => d.bbox.height + 2 * yMargin)
            .style("fill", function(){
                if(THEME == "dark"){return "url(#tagGradFill)"}
                return "black";
            })
            .attr("rx", 4)
            .attr("stroke", "grey")
            .attr("stroke-width", 1)
            .style("fill-opacity", 0.8)
            .style("stroke-opacity", 0.8)
            .attr('transform', function(d) {
                return `translate(-${xMargin}, -${d.bbox.height * 0.8 + yMargin})`
                });
            
           // add the text back
           svg
            .selectAll("text")
            .data(places_points)
            .enter()
            .append("text")
            .attr("x", d => current_projection(d.geometry.coordinates)[0])
            .attr("y", d => current_projection(d.geometry.coordinates)[1])
            .attr("dx", function(d){
                if(d.properties.NAME_EN == 'Vancouver'){ // shorts 
                    return -d.bbox.width/2 + 30;
                }
                if(d.properties.NAME_EN == 'Victoria'){ // shorts 
                    return 30;
                }
                if(d.properties.NAME_EN == 'San Jose'){ // adjust 
                    return d.bbox.width/2;
                }
                if(d.properties.NAME_EN == 'SA Brasília'){ // adjust 
                    return -3*d.bbox.width/4; // because there is no top anchor
                }
                if(d.properties.NAME_EN == 'Ponta Delgada'){ // adjust 
                    return 40;
                }
                if(d.properties.NAME_EN == 'Jakata'){ // adjust 
                    return -d.bbox.width/2 - 7; // because there is no top anchor
                }
                if(d.properties.NAME_EN == 'Boston'){ // adjust 
                    return -d.bbox.width/2 + 10; // because there is no top anchor
                }
                if(d.properties.NAME_EN == 'Providence'){ // adjust 
                    return 0; // because there is no top anchor
                }
                if(d.properties.NAME_EN == 'THRASH São Paulo'){ // adjust 
                    return -d.bbox.width/2 - 15; // because there is no top anchor
                }
                if(d.properties.NAME_EN == 'Santos'){ // adjust 
                    return 15; // because there is no top anchor
                }
                if(d.properties.NAME_EN == 'Ho Chi Minh City'){ // adjust 
                    return  16; // because there is no top anchor
                }
                if(d.properties.NAME_EN == 'Singapore'){ // adjust 
                    return 15; // because there is no top anchor
                }
                if(d.properties.NAME_EN == 'LONG Kuala Lumpur'){ // adjust 
                    return -d.bbox.width/2 - 12; // because there is no top anchor
                }
                if(d.properties.NAME_EN == 'Basel'){ // adjust 
                    return -d.bbox.width/2 - 7; // because there is no top anchor
                }
                if(d.properties.NAME_EN == 'Liestal'){ // adjust 
                    return  12; // because there is no top anchor
                }
                if(d.properties.NAME_EN == 'The Hague'){ // adjust 
                    return -d.bbox.width/2 - 5; // because there is no top anchor
                }
                if(d.properties.NAME_EN == 'Rotterdam'){ // adjust 
                    return  14; // because there is no top anchor
                }
                if(d.properties.NAME_EN == 'Dhaka'){ // adjust 
                    return -d.bbox.width/2 - 30; // because there is no top anchor
                }
                if(d.properties.NAME_EN == 'Bandung'){ // adjust 
                    return 9; // because there is no top anchor
                }
                if(d.properties.NAME_EN == 'Buenos Aires'){ // adjust 
                    return 15; // because there is no top anchor
                }
                if(d.properties.NAME_EN == 'Essen'){ // adjust 
                    return - d.bbox.width;
                }
                if(d.properties.NAME_EN == 'Providence'){ // adjust 
                    return 0;
                }
                if(d.properties.NAME_EN == 'Düsseldorf'){ // adjust 
                    return - d.bbox.width/2;
                }
                if(!(d.properties.NAME_EN in anchors)){ // middle default
                    return 0;
                }
                if(anchors[d.properties.NAME_EN] == "start"){
                    return d['radius'];// + xMargin/2;
                };
                if(anchors[d.properties.NAME_EN] == "top"){
                    return -d.bbox.width/2; // because there is no top anchor
                };
                return -1*d['radius'] - xMargin/2; // end
            })
            .attr("dy", function(d){
                if(d.properties.NAME_EN == 'SA Belo Horizonte'){ // adjust 
                    return 17;
                }
                if(d.properties.NAME_EN == 'Ottawa'){ // adjust 
                    return - 10;
                }
                if(d.properties.NAME_EN == 'Pune'){ // adjust 
                    return 12;
                }
                if(d.properties.NAME_EN == 'Dhaka'){ // adjust 
                    return -1*d['radius'] - yMargin + 5;
                }
                if(d.properties.NAME_EN == 'Durban'){ // adjust 
                    return 15;
                }
                if(d.properties.NAME_EN == 'Chittagong'){ // adjust 
                    return 12;
                }
                if(d.properties.NAME_EN == 'Bloemfontein'){ // adjust 
                    return 12;
                }
                if(d.properties.NAME_EN == 'Long Island'){ // adjust 
                    return 12;
                }
                if(d.properties.NAME_EN == 'Cheltenham'){ // adjust 
                    return - 5;
                }
                if(d.properties.NAME_EN == 'DEATH Bristol'){ // adjust 
                    return  5;
                }
                if(d.properties.NAME_EN == 'Santiago'){ // adjust 
                    return  5;
                }
                if(d.properties.NAME_EN == 'Gothenburg'){ // adjust 
                    return  10;
                }
                if(d.properties.NAME_EN == 'Borås'){ // adjust 
                    return  10;
                }
                if(d.properties.NAME_EN == 'Beirut'){ // adjust 
                    return - 10;
                }
                if(d.properties.NAME_EN == 'Montreal'){ // adjust 
                    return  10;
                }
                if(d.properties.NAME_EN == 'Wollongong'){ // adjust 
                    return  10;
                }
                if(d.properties.NAME_EN == 'SA Rio de Janeiro'){ // adjust 
                    return -10;
                }
                if(!(d.properties.NAME_EN in anchors)){ // middle default
                    return d['radius'] + d.bbox.height/2 + yMargin;
                }
                if(anchors[d.properties.NAME_EN] == "start"){
                    return 0;
                };
                if(anchors[d.properties.NAME_EN] == "top"){
                    return -1*d['radius'] - yMargin;
                };
                //if(d.properties.NAME_EN == 'São Paulo'){ // adjust for south america  view 
                    //return -10;
                //}
                return 0; // end
            })
            //.attr("stroke", function(){
                //if(THEME == "dark"){return "beige"}
                //return "black";
            //})
            .attr("fill", function(){
                if(THEME == "dark"){return "black"}
                return "black";
            })
            .style('font-size', d => textScale(d.properties.POP_MAX)+"rem")
            .style('font-weight', 700)
            .attr("letter-spacing", "2px")
            .attr("text-anchor", function(d){
                if(d.properties.NAME_EN in anchors){
                    return anchors[d.properties.NAME_EN];
                }
                return "middle";
            })
            .text(function(d){
                if(d.properties.NAME_EN == "Kiev"){return "Kyiv";}
                return d.properties.NAME_EN;
            });


        /* FORCE SIMULATION */

        // Create a simulation with several forces.
        // https://github.com/ericsoco/d3-force-cluster
        // https://observablehq.com/@d3/force-directed-graph/2?collection=@d3/d3-force
        // collision warming
        // https://stamen.com/forcing-functions-inside-d3-v4-forces-and-layout-transitions-f3e89ee02d12/

        // add band nodes (image) NOTE: need to give image nodes data before update function (for positions i think)
        var no_nodes = nodes.length/2; // account for base nodes
        image_width = base_image_width - Math.ceil(no_nodes/20)*10; // decrease every 14
        min_image_height = image_width/4;
        max_image_height = image_width/1.4;
        
        /*
        var node = svg.append("g").selectAll("images")
        .data(nodes, d => d.id)
        .enter().append('image')
        .attr("xlink:href", function(d){
            if(d['genre'] == 'made' || d['genre'] == 'modified'){ // made logo
                return "logos_transparent/" + d['genre'] + "/" + d.logo;
            }
            else{
                return "logos_transparent/" + d['genre'] + "/"+ d['local_region'] + "/" + d.logo;
            }

         })
         .attr("width", function(d){

            if(d.nodeType=="base"){
                d['width'] = 0;
                d['height'] = 0;
                return 0;}

            // set from image wwidth and adjust
            var image_height = (image_width/d.image_size[0]) * d.image_size[1];
            var node_width = image_width;
            if(image_height < min_image_height){
                node_width = (min_image_height/d.image_size[1]) * d.image_size[0];
                if(node_width>(1.5*image_width)){ // cap width
                    node_width = 1.5*image_width;
                }

            }
            else if(image_height > max_image_height){
                node_width = (max_image_height/d.image_size[1]) * d.image_size[0];
            
            }

            d['width'] = node_width;
            d['height'] = (node_width/d.image_size[0]) * d.image_size[1];
            return node_width;
            })  
        .attr("class", "nodes")
        .call(d3.drag()
            .on("start", dragstarted)
            .on("drag", dragged)
            .on("end", dragended));
        */
        
        //** Simulation settings  // alphadecay 0.0028  velocitydecay 0.4
        simulation = d3.forceSimulation(nodes).velocityDecay(0.5).alphaDecay(0.005)//.alphaMin(0.5)//.alphaDecay(0.01)//.velocityDecay(0.4)//.alpha(0.1)..velocityDecay(0.5)//.alphaDecay(0.1)//.velocityDecay(0.8)//.alpha(0.5).alphaDecay(0.1).velocityDecay(0.8)
            .force("link", d3.forceLink(links).id(d => d.id).strength(0.1))
            .force("collide", d3.forceCollide().radius(function(d){
                if(d['nodeType'] == 'band'){
                    if(d.width >= d.height){
                        return d.width/2 + 5;
                    }
                    else{
                        return d.height/2 + 5;
                    }
                }
                else{
                    return 20;
                }
            }).strength(0.5))
            .force("boundary", forceBoundary(0, 0, width, height-100).strength(0.05)) // 0.005
            .on("tick.ticked", ticked);
        
        simulation.nodes(nodes);
        simulation.force("link").links(links); 
        
        // check speed for animation
        function speed(){

            // check all nodes speed
            var speed_min = 0.3;
            var stop = true;
            for(let i=0; i<nodes.length; i++){
                if(Math.abs(nodes[i].vx) > speed_min || Math.abs(nodes[i].vy) > speed_min){
                    stop = false;
                    break;
                }
            }

            // animnate to next year
            var run_pause = true;
            if(stop && nodes.length>0 && current_year < 2024 && run_pause){
                // stop initial animation
                // clearInterval(animate_timeout);

                // delay function
                run_pause = false;
                setTimeout(function(d){
                    run_pause = true;
                }, 6000);

                if(!(animate)){
                    
                    // update the map
                    var year_display = document.getElementById("yearDisplay");
                    prev_year = current_year;
                    current_year += 1;
                    year_display.innerHTML = current_year;
                    update_graph_all_genres();
                }
                
            }
        }
        
        // ticked function
        function ticked() {
            
           
            // source is base
            link
            .attr("x1", d => d.source.x)
            .attr("y1", d => d.source.y)
            .attr("x2", function(d){ // update target point to account for width/height
                var image_tag = document.getElementById('bandLogo');
                var image_box = image_tag.getBoundingClientRect();
                return image_box.x + image_box.width/2 - 100;
            })
            .attr("y2", function(d){
                var image_tag = document.getElementById('bandLogo');
                var image_box = image_tag.getBoundingClientRect();
                return image_box.y + image_box.height/2;
            });
            
            /*
            node
            .attr("x", function(d){
                return d.x;
            })
            .attr("y", function(d){
                return d.y;
            });
            */

            
            base_node
            .attr("cx", d => d.x)
            .attr("cy",d => d.y);
            
            
        }

        // global update chart (upate, enter, exit nodes and links)
        update_chart = function(){
            //console.log(nodes);
            //console.log(links);
            changes = true;

            // set transition for remove but no add
            var trans_time = 4000;
            if(changes_remove && !(changes_add)){
                trans_time = 2000;
            }

            // set image width
            var no_nodes = nodes.length/2; // account for base nodes
            image_width = base_image_width - Math.ceil(no_nodes/20)*10; // 60 - 140
            min_image_height = image_width/4;
            max_image_height = image_width/1.4;
            //console.log(image_width + " image width");

            // let the speed function know its animating
            //animate = true;
            //setTimeout(function(){
                //animate = false;
            //}, 6000);
            
            // Dont use join as messes with exit
            // Instead define seperate enter() amd exit() and use merge as below
            // Always mutate the nodes/links arrays (ie manually add/remove and never overwrite)
            // update (existing), exit (remove old), enter (append new)

            //* base node

            // update existing nodes..HERE transition without data
            /*
            if(changes){
                base_node.data(nodes, d => d.id)
                .style("opacity", 0).transition().duration(trans_time).style("opacity", 0)
                .transition().duration(3000).style("opacity", 1);
            }
            */

            // give back data
            base_node = base_node.data(nodes, d => d.id);

            // exit nodes
            base_node.exit()
            .transition().duration(0).style("opacity", 0).remove();

            // enter new nodes (diff based on whether in view or not)
            base_node = base_node
                .enter().append("circle")
                .attr("class", "nodes")
                .attr("fill", function(d){
                    if(d.nodeType == "band"){return "none";}
                    return "black";
                })
                .attr("stroke-width", 0)
                .style("stroke-opacity", function(d){
                    var in_view = false;
                    var views = document.getElementsByClassName('views');
                    for(let view of views){
                        // bbox
                        var bb = view.getBBox();

                        // bottom right
                        bb.ax = bb.x + bb.width;
                        bb.ay = bb.y + bb.height;
                    

                        if(bb.x <= d.x && d.x <= bb.ax && bb.y <= d.y && d.y <= bb.ay ) {
                            // Point is in bounding box
                            in_view = true;
                        }
                        
                    }
                    if(in_view){return 0;}
                    return 1;
                })
                .style("fill-opacity", function(d){
                    var in_view = false;
                    var views = document.getElementsByClassName('views');
                    for(let view of views){
                        // bbox
                        var bb = view.getBBox();

                        // bottom right
                        bb.ax = bb.x + bb.width;
                        bb.ay = bb.y + bb.height;
                    

                        if(bb.x <= d.x && d.x <= bb.ax && bb.y <= d.y && d.y <= bb.ay ) {
                            // Point is in bounding box
                            in_view = true;
                        }
                        
                    }
                    if(in_view){return 0;}
                    return 0;
                })
                .attr("filter", function(d){
                    var in_view = false;
                    var views = document.getElementsByClassName('views');
                    for(let view of views){
                        // bbox
                        var bb = view.getBBox();

                        // bottom right
                        bb.ax = bb.x + bb.width;
                        bb.ay = bb.y + bb.height;
                    

                        if(bb.x <= d.x && d.x <= bb.ax && bb.y <= d.y && d.y <= bb.ay ) {
                            // Point is in bounding box
                            in_view = true;
                        }
                        
                    }
                    if(!(in_view)){
                        return "url(#specularwhitesmoke)";
                    }
                    return "url(#specular" + baseColour + ")"
                    
                })
                .attr("r", function(d){
                    if(d.nodeType == "band"){return 0;}
                    
                    var in_view = false;
                    var views = document.getElementsByClassName('views');
                    for(let view of views){
                        // bbox
                        var bb = view.getBBox();

                        // bottom right
                        bb.ax = bb.x + bb.width;
                        bb.ay = bb.y + bb.height;
                    

                        if(bb.x <= d.x && d.x <= bb.ax && bb.y <= d.y && d.y <= bb.ay ) {
                            // Point is in bounding box
                            in_view = true;
                        }
                        
                    }

                    if(in_view){
                        return place_radius;
                    }
                    else{return 8;}

                }).merge(base_node);

            //**  links
            
            /*
            // update existing
            if(changes){
                link.data(links, function(d) { return d.source.id + "-" + d.target.id; })
                .style("opacity", 0).transition().duration(trans_time).style("opacity", 0)
                .transition().duration(3000).style("opacity", 1);
            }
            */
            
            // then give back data
            link = link.data(links, function(d) { return d.source.id + "-" + d.target.id; });

            // exit links
            link.exit()
            .transition().duration(0).style("opacity", 0).remove();
            
            // enter new links
            link = link
                .enter()
                .append("line")
                .attr("class", "links")
                .attr("stroke", function(d){
                    return baseColour;
                })
                .attr("stroke-width", 1)
                .attr("stroke-opacity", 0.8)
                .merge(link);
            
            
            if(changes){
                    simulation.velocityDecay(0.5).alphaDecay(0.005)
                        .force("link", d3.forceLink(links).id(d => d.id).strength(0.1))
                        .force("collide", d3.forceCollide().radius(function(d){
                        if(d['nodeType'] == 'band'){
                            
                            if(d.width >= d.height){
                                return d.width/2 + 5;
                            }
                            else{
                                return d.height/2 + 5;
                            }
                        }
                        else{
                            return 20;
                        }
                    }).strength(0.5));
                }
            
                // regen sim
                simulation.nodes(nodes);
                simulation.alpha(0.9).restart().tick();
                
                //ticked(); // render now!
                
        }

        // get bb of text
        function getBB(selection) {
            selection.each(function(d){d.bbox = this.getBBox();})
        }
            
    }

    
    
        
  // Reheat the simulation when drag starts, and fix the subject position.
  function dragstarted(event) {
    if (!event.active) simulation.alphaTarget(0.3).restart();
    event.subject.fx = event.subject.x;
    event.subject.fy = event.subject.y;
  }

  // Update the subject (dragged node) position during drag.
  function dragged(event) {
    event.subject.fx = event.x;
    event.subject.fy = event.y;
  }

  // Restore the target alpha so the simulation cools after dragging ends.
  // Unfix the subject position now that it’s no longer being dragged.
  function dragended(event) {
    if (!event.active) simulation.alphaTarget(0);
    event.subject.fx = null;
    event.subject.fy = null;
  }

  

    </script>
</head>